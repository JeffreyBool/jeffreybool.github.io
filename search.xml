<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>golang 调度器 GMP 原理与调度实现全解析</title>
      <link href="/article/38fa8747.html"/>
      <url>/article/38fa8747.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>该文章主要详细具体的介绍Goroutine调度器过程及原理，可以对Go调度器的详细调度过程有一个清晰的理解，花    费4天时间作了30+张图(推荐收藏)，包括如下几个章节。</p></blockquote><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><p>第一章 Golang 调度器的由来</p></li><li><p>第二章 Goroutine 调度器的 GMP 模型及设计思想</p></li><li><p>第三章 Goroutine 调度场景过程全图文解析</p><h2 id="一、Golang-调度器的由来"><a href="#一、Golang-调度器的由来" class="headerlink" title="一、Golang 调度器的由来"></a>一、Golang 调度器的由来</h2><h3 id="1-单进程时代不需要调度器"><a href="#1-单进程时代不需要调度器" class="headerlink" title="1. 单进程时代不需要调度器"></a>1. 单进程时代不需要调度器</h3><p>我们知道，一切的软件都是运行在操作系统上，真正用来干活（计算）的是 cpu，早期的操作系统每个程序就是一个进程，直到程序运行完，才能运行下一个进程，这就是“单进程”时代，一切的程序只能串行运行。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/LlRw9G.jpg" alt="单进程操作系统"></p></li></ol><ul><li>早期的单进程操作系统，面临2个问题：<ul><li><ol><li>单一的执行流程，计算机只能一个任务一个任务处理。</li></ol></li><li><ol start="2"><li>进程阻塞所带来的CPU时间浪费。</li></ol></li></ul></li></ul><p>那么能不能有多个进程来宏观一起来执行多个任务呢？</p><p>后来操作系统就具有了<strong>最早的并发能力：多进程并发</strong>，当一个进程阻塞的时候，切换到另外等待执行的进程，这样就能尽量把CPU利用起来，CPU就不浪费了。</p><h3 id="2-多进程-线程时代有了调度器需求"><a href="#2-多进程-线程时代有了调度器需求" class="headerlink" title="2. 多进程/线程时代有了调度器需求"></a>2. 多进程/线程时代有了调度器需求</h3><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/Pmd6jM.jpg" alt="多进程操作系统"></p><p>在多进程/多线程的操作系统中，就解决了阻塞的问题，因为一个进程阻塞 cpu 可以立刻切换到其他进程中去执行，而且调度 cup 的算法可以保证运行的进程都可以被分配到 cup 的运行时间片。这样从宏观来看，似乎多个进程是在同时被运行。</p><p>但新的问题就又出现了，进程拥有太多的资源，进程的创建、切换、销毁，都会占用很长的时间，CPU 虽然利用起来了，但如果进程过多，CPU 有很大的一部分都被用来进行进程调度了。</p><p><strong>怎么才能提高 CPU 的利用率呢？</strong></p><p>但是对于 Linux 操作系统来讲，cpu对进程的态度和线程的态度是一样的。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/tKQm0n.jpg" alt="cpu切换浪费成本"></p><p>很明显，CPU 调度切换的是进程和线程。尽管线程看起来很美好，但实际上多线程开发设计会变得更加复杂，要考虑很多同步竞争等问题，如锁、竞争冲突等。</p><h3 id="3-协程来提高CPU利用率"><a href="#3-协程来提高CPU利用率" class="headerlink" title="3. 协程来提高CPU利用率"></a>3. 协程来提高CPU利用率</h3><p>多进程、多线程已经提高了系统的并发能力，但是在当今互联网高并发场景下，为每个任务都创建一个线程是不现实的，因为会消耗大量的内存(进程虚拟内存会占用4GB[32位操作系统], 而线程也要大约4MB)。</p><p>大量的进程/线程出现了新的问题</p><ul><li>高内存占用</li><li>调度的高消耗CPU</li></ul><p>好了，然后工程师们就发现，其实一个线程分为”内核态”线程和”用户态”线程。</p><p>一个“用户态线程”必须要绑定一个“内核态线程”，但是CPU并不知道有“用户态线程”的存在，它只知道它运行的是一个“内核态线程”(Linux的PCB进程控制块)。</p><p> <img src="http://cdn.zhanggaoyuan.com/article/20200701/kFfPrg.jpg" alt="线程的内核和用户态"></p><p>这样，我们再去细化去分类一下，内核线程依然叫“线程(thread)”，用户线程叫“协程(co-routine)”.</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/eDwPsP.jpg" alt="协程和线程"></p><p>看到这里，我们就要开脑洞了，既然一个协程(co-routine)可以绑定一个线程(thread)，那么能不能多个协程(co-routine)绑定一个或者多个线程(thread)上呢，之后，我们就看到了协程和线程的映射关系。</p><h4 id="N-1关系"><a href="#N-1关系" class="headerlink" title="N:1关系"></a>N:1关系</h4><p>N个协程绑定1个线程，优点就是<strong>协程在用户态线程即完成切换，不会陷入到内核态，这种切换非常的轻量快速</strong>。但也有很大的缺点，1个进程的所有协程都绑定在1个线程上</p><ul><li><p>缺点：</p><ul><li>某个程序用不了硬件的多核加速能力</li><li>一旦某协程阻塞，造成线程阻塞，本进程的其他协程都无法执行了，根本就没有并发的能力了。</li></ul></li></ul><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/8i8ZCt.jpg" alt="N-1关系"></p><h4 id="1-1-关系"><a href="#1-1-关系" class="headerlink" title="1:1 关系"></a>1:1 关系</h4><p>1个协程绑定1个线程，这种最容易实现。协程的调度都由CPU完成了，不存在N:1缺点。</p><ul><li>缺点：<ul><li>协程的创建、删除和切换的代价都由CPU完成，代价有点略显昂贵了。</li></ul></li></ul><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/nQWkMb.jpg" alt="1-1关系"></p><h4 id="M-N关系"><a href="#M-N关系" class="headerlink" title="M:N关系"></a>M:N关系</h4><p>M个协程绑定1个线程，是N:1和1:1类型的结合，克服了以上2种模型的缺点，但实现起来最为复杂。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/Xia7Y0.jpg" alt="m-n关系"></p><p>协程跟线程是有区别的，线程由CPU调度是抢占式的，<strong>协程由用户态调度是协作式的</strong>，一个协程让出CPU后，才执行下一个协程。</p><h3 id="4-Go语言的协程goroutine"><a href="#4-Go语言的协程goroutine" class="headerlink" title="4. Go语言的协程goroutine"></a>4. Go语言的协程goroutine</h3><p><strong>Go为了提供更容易使用的并发方法，使用了 <code>goroutine</code> 和 <code>channel</code></strong>。<code>goroutine</code> 来自协程的概念，让一组可复用的函数运行在一组线程之上，即使有协程阻塞，该线程的其他协程也可以被<code>runtime</code>调度，转移到其他可运行的线程上。最关键的是，程序员看不到这些底层的细节，这就降低了编程的难度，提供了更容易的并发。</p><p>Go中，协程被称为 <code>goroutine</code>，它非常轻量，一个 goroutine 只占几KB，并且这几KB就足够goroutine运行完，这就能在有限的内存空间内支持大量goroutine，支持了更多的并发。虽然一个goroutine的栈只占几KB，但实际是可伸缩的，如果需要更多内容，<code>runtime</code>会自动为goroutine分配。</p><h4 id="Goroutine特点："><a href="#Goroutine特点：" class="headerlink" title="Goroutine特点："></a>Goroutine特点：</h4><ol><li>占用内存更小（几kb）</li><li>调度更灵活(runtime调度)</li><li>使用简单(runtime调度屏蔽底层细节，降级编程的难度)</li></ol><h3 id="5-被废弃的goroutine调度器"><a href="#5-被废弃的goroutine调度器" class="headerlink" title="5. 被废弃的goroutine调度器"></a>5. 被废弃的goroutine调度器</h3><p>好了，既然我们知道了协程和线程的关系，那么最关键的一点就是调度协程的调度器的实现了。</p><p>Go目前使用的调度器是2012年重新设计的，因为之前的调度器性能存在问题，所以使用4年就被废弃了，那么我们先来分析一下被废弃的调度器是如何运作的？</p><blockquote><p>大部分文章都是会用G来表示Goroutine，用M来表示线程，那么我们也会用这种表达的对应关系。</p></blockquote><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/4vEyS4.jpg" alt="GM"></p><p>下面我们来看看被废弃的golang调度器是如何实现的？</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/cxuuJ8.jpg" alt="old调度器"></p><p>M想要执行、放回G都必须访问全局G队列，并且M有多个，即多线程访问同一资源需要加锁进行保证互斥/同步，所以全局G队列是有互斥锁进行保护的。</p><h4 id="老调度器有几个缺点："><a href="#老调度器有几个缺点：" class="headerlink" title="老调度器有几个缺点："></a>老调度器有几个缺点：</h4><ol><li>创建、销毁、调度G都需要每个M获取锁，这就形成了<strong>激烈的锁竞争</strong>。</li><li>M转移G会造成<strong>延迟和额外的系统负载</strong>。比如当G中包含创建新协程的时候，M创建了G’，为了继续执行G，需要把G’交给M’执行，也造成了<strong>很差的局部性</strong>，因为G’和G是相关的，最好放在M上执行，而不是其他M’。</li><li>系统调用(CPU在M之间的切换)导致频繁的线程阻塞和取消阻塞操作增加了系统开销。</li></ol><h2 id="二、Goroutine调度器的GMP模型的设计思想"><a href="#二、Goroutine调度器的GMP模型的设计思想" class="headerlink" title="二、Goroutine调度器的GMP模型的设计思想"></a>二、Goroutine调度器的GMP模型的设计思想</h2><p>面对之前调度器的问题，Go设计了新的调度器。</p><p>在新调度器中，出列 <code>M(thread)</code> 和 <code>G(goroutine)</code>，又引进了 <code>P(Processor)</code>。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/sHsQto.jpg" alt="GMP调度器"></p><blockquote><p><strong>Processor，它包含了运行goroutine的资源</strong>，如果线程想运行goroutine，必须先获取P，P中包含了可运行的G队列。 </p></blockquote><h3 id="1-GMP模型"><a href="#1-GMP模型" class="headerlink" title="1. GMP模型"></a>1. GMP模型</h3><p>在Go中，<strong>线程是运行goroutine的实体，调度器的功能是把可运行的goroutine分配到工作线程上</strong>。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/noSpOX.jpg" alt="GMP-调度"></p><ol><li><strong>全局队列</strong>（Global Queue）：存放等待运行的G。</li><li><strong>P的本地队列</strong>：同全局队列类似，存放的也是等待运行的G，存的数量有限，不超过256个。新建G’时，G’优先加入到P的本地队列，如果队列满了，则会把本地队列中一半的G移动到全局队列。</li><li><strong>P列表</strong>：所有的P都在程序启动时创建，并保存在数组中，最多有<code>GOMAXPROCS</code>(可配置)个。</li><li><strong>M</strong>：线程想运行任务就得获取P，从P的本地队列获取G，P的本地队列为空时，M也会尝试从全局队列<strong>拿</strong>一批G放到P的本地队列，或从其他P的本地队列<strong>偷</strong>一半放到自己P的本地队列。M运行G，G执行之后，M会从P获取下一个G，不断重复下去。</li></ol><blockquote><p>Goroutine调度器和OS调度器是通过M结合起来的，每个M都代表了1个内核线程，OS调度器负责把内核线程分配到CPU的核上执行。</p></blockquote><h4 id="有关P和M的个数问题"><a href="#有关P和M的个数问题" class="headerlink" title="有关P和M的个数问题"></a>有关P和M的个数问题</h4><ul><li><p>P的数量：</p><ul><li>由启动时环境变量<code>$GOMAXPROCS</code>或者是由<code>runtime</code>的方法<code>GOMAXPROCS()</code>决定。这意味着在程序执行的任意时刻都只有<code>$GOMAXPROCS</code>个goroutine在同时运行。</li></ul></li><li><p>M的数量:</p><ul><li>go语言本身的限制：go程序启动时，会设置M的最大数量，默认10000.但是内核很难支持这么多的线程数，所以这个限制可以忽略。</li><li>runtime/debug中的SetMaxThreads函数，设置M的最大数量</li><li>一个M阻塞了，会创建新的M。</li></ul></li></ul><p>M与P的数量没有绝对关系，一个M阻塞，P就会去创建或者切换另一个M，所以，即使P的默认数量是1，也有可能会创建很多个M出来。</p><h4 id="P和M何时会被创建"><a href="#P和M何时会被创建" class="headerlink" title="P和M何时会被创建"></a>P和M何时会被创建</h4><p>1、P何时创建：在确定了P的最大数量n后，运行时系统会根据这个数量创建n个P。</p><p>2、M何时创建：没有足够的M来关联P并运行其中的可运行的G。比如所有的M此时都阻塞住了，而P中还有很多就绪任务，就会去寻找空闲的M，而没有空闲的，就会去创建新的M。</p><h3 id="2-调度器的设计策略"><a href="#2-调度器的设计策略" class="headerlink" title="2. 调度器的设计策略"></a>2. 调度器的设计策略</h3><p><strong>复用线程</strong>：避免频繁的创建、销毁线程，而是对线程的复用。</p><ul><li>work stealing机制</li></ul><p>当本线程无可运行的G时，尝试从其他线程绑定的P偷取G，而不是销毁线程。</p><ul><li>hand off机制</li></ul><p>当本线程因为G进行系统调用阻塞时，线程释放绑定的P，把P转移给其他空闲的线程执行。</p><p><strong>利用并行</strong>：<code>GOMAXPROCS</code>设置P的数量，最多有<code>GOMAXPROCS</code>个线程分布在多个CPU上同时运行。<code>GOMAXPROCS</code>也限制了并发的程度，比如<code>GOMAXPROCS = 核数/2</code>，则最多利用了一半的CPU核进行并行。</p><p><strong>抢占</strong>：在coroutine中要等待一个协程主动让出CPU才执行下一个协程，在Go中，一个goroutine最多占用CPU 10ms，防止其他goroutine被饿死，这就是goroutine不同于coroutine的一个地方。</p><p><strong>全局G队列</strong>：在新的调度器中依然有全局G队列，但功能已经被弱化了，当M执行work stealing从其他P偷不到G时，它可以从全局G队列获取G。</p><h3 id="3-go-func-调度流程"><a href="#3-go-func-调度流程" class="headerlink" title="3. go func() 调度流程"></a>3. go func() 调度流程</h3><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/pLNg0M.jpg" alt="go-func调度周期"></p><p>从上图我们可以分析出几个结论：</p><ol><li><p>我们通过 go func()来创建一个goroutine；</p></li><li><p>有两个存储G的队列，一个是局部调度器P的本地队列、一个是全局G队列。新创建的G会先保存在P的本地队列中，如果P的本地队列已经满了就会保存在全局的队列中；</p></li><li><p>G只能运行在M中，一个M必须持有一个P，M与P是1：1的关系。M会从P的本地队列弹出一个可执行状态的G来执行，如果P的本地队列为空，就会想其他的MP组合偷取一个可执行的G来执行；</p></li><li><p>一个M调度G执行的过程是一个循环机制；</p></li><li><p>当M执行某一个G时候如果发生了syscall或则其余阻塞操作，M会阻塞，如果当前有一些G在执行，runtime会把这个线程M从P中摘除(detach)，然后再创建一个新的操作系统的线程(如果有空闲的线程可用就复用空闲线程)来服务于这个P；</p></li><li><p>当M系统调用结束时候，这个G会尝试获取一个空闲的P执行，并放入到这个P的本地队列。如果获取不到P，那么这个线程M变成休眠状态， 加入到空闲线程中，然后这个G会被放入全局队列中。</p></li></ol><h3 id="4-调度器的生命周期"><a href="#4-调度器的生命周期" class="headerlink" title="(4)调度器的生命周期"></a>(4)调度器的生命周期</h3><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/CIwhwa.jpg" alt="go调度器生命周期"></p><p>特殊的M0和G0</p><p><strong>M0</strong></p><p><code>M0</code>是启动程序后的编号为0的主线程，这个M对应的实例会在全局变量runtime.m0中，不需要在heap上分配，M0负责执行初始化操作和启动第一个G， 在之后M0就和其他的M一样了。</p><p><strong>G0</strong></p><p><code>G0</code>是每次启动一个M都会第一个创建的gourtine，G0仅用于负责调度的G，G0不指向任何可执行的函数, 每个M都会有一个自己的G0。在调度或系统调用时会使用G0的栈空间, 全局变量的G0是M0的G0。</p><p>我们来跟踪一段代码</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>接下来我们来针对上面的代码对调度器里面的结构做一个分析。</p><p>也会经历如上图所示的过程：</p><ol><li>runtime创建最初的线程m0和goroutine g0，并把2者关联。</li><li>调度器初始化：初始化m0、栈、垃圾回收，以及创建和初始化由GOMAXPROCS个P构成的P列表。</li><li>示例代码中的main函数是<code>main.main</code>，<code>runtime</code>中也有1个main函数——<code>runtime.main</code>，代码经过编译后，<code>runtime.main</code>会调用<code>main.main</code>，程序启动时会为<code>runtime.main</code>创建goroutine，称它为main goroutine吧，然后把main goroutine加入到P的本地队列。</li><li>启动m0，m0已经绑定了P，会从P的本地队列获取G，获取到main goroutine。</li><li>G拥有栈，M根据G中的栈信息和调度信息设置运行环境</li><li>M运行G</li><li>G退出，再次回到M获取可运行的G，这样重复下去，直到<code>main.main</code>退出，<code>runtime.main</code>执行Defer和Panic处理，或调用<code>runtime.exit</code>退出程序。</li></ol><p>调度器的生命周期几乎占满了一个Go程序的一生，<code>runtime.main</code>的goroutine执行之前都是为调度器做准备工作，<code>runtime.main</code>的goroutine运行，才是调度器的真正开始，直到<code>runtime.main</code>结束而结束。</p><h3 id="5-可视化GMP编程"><a href="#5-可视化GMP编程" class="headerlink" title="(5)可视化GMP编程"></a>(5)可视化GMP编程</h3><p>有2种方式可以查看一个程序的GMP的数据。</p><p><strong>方式1：go tool trace</strong></p><p>trace记录了运行时的信息，能提供可视化的Web页面。</p><p>简单测试代码：main函数创建trace，trace会运行在单独的goroutine中，然后main打印”Hello World”退出。</p><blockquote><p>trace.go</p></blockquote><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span>    <span class="token string">"fmt"</span>    <span class="token string">"runtime/trace"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建trace文件</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token string">"trace.out"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//启动trace goroutine</span>    err <span class="token operator">=</span> trace<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> trace<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//main</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>运行程序</p><pre class=" language-bash"><code class="language-bash">$ go run trace.go Hello World</code></pre><p>会得到一个<code>trace.out</code>文件，然后我们可以用一个工具打开，来分析这个文件。</p><pre class=" language-golang"><code class="language-golang">$ go tool trace trace.out 2020/02/23 10:44:11 Parsing trace...2020/02/23 10:44:11 Splitting trace...2020/02/23 10:44:11 Opening browser. Trace viewer is listening on http://127.0.0.1:33479</code></pre><p>我们可以通过浏览器打开<code>http://127.0.0.1:33479</code>网址，点击<code>view trace</code> 能够看见可视化的调度流程。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/24xJGT.jpg" alt="go-trace1"></p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/hgHBPi.jpg" alt="go-trace2"></p><p><strong>G信息</strong></p><p>点击Goroutines那一行可视化的数据条，我们会看到一些详细的信息。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/n1lefr.jpg" alt="go-trace3"></p><p>一共有两个G在程序中，一个是特殊的G0，是每个M必须有的一个初始化的G，这个我们不必讨论。</p><p>其中G1应该就是main goroutine(执行main函数的协程)，在一段时间内处于可运行和运行的状态。</p><p><strong>M信息</strong></p><p>点击Threads那一行可视化的数据条，我们会看到一些详细的信息。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/9yWIhA.jpg" alt="go-trace4"></p><p>一共有两个M在程序中，一个是特殊的M0，用于初始化使用，这个我们不必讨论。</p><p><strong>P信息</strong></p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/bD5Efn.png" alt="go-trace5"></p><p>G1中调用了<code>main.main</code>，创建了<code>trace goroutine g18</code>。G1运行在P1上，G18运行在P0上。</p><p>这里有两个P，我们知道，一个P必须绑定一个M才能调度G。</p><p>我们在来看看上面的M信息。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/z7YAHh.png" alt="go-trace6"></p><p>我们会发现，确实G18在P0上被运行的时候，确实在Threads行多了一个M的数据，点击查看如下：</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/spWeIt.png" alt="go-trace7"></p><p>多了一个M2应该就是P0为了执行G18而动态创建的M2.</p><p><strong>方式2：Debug trace</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译</p><pre class=" language-bash"><code class="language-bash">$ go build trace2.go</code></pre><p>通过Debug方式运行</p><pre class=" language-bash"><code class="language-bash">$ GODEBUG<span class="token operator">=</span>schedtrace<span class="token operator">=</span>1000 ./trace2 SCHED 0ms: gomaxprocs<span class="token operator">=</span>2 idleprocs<span class="token operator">=</span>0 threads<span class="token operator">=</span>4 spinningthreads<span class="token operator">=</span>1 idlethreads<span class="token operator">=</span>1 runqueue<span class="token operator">=</span>0 <span class="token punctuation">[</span>0 0<span class="token punctuation">]</span>Hello WorldSCHED 1003ms: gomaxprocs<span class="token operator">=</span>2 idleprocs<span class="token operator">=</span>2 threads<span class="token operator">=</span>4 spinningthreads<span class="token operator">=</span>0 idlethreads<span class="token operator">=</span>2 runqueue<span class="token operator">=</span>0 <span class="token punctuation">[</span>0 0<span class="token punctuation">]</span>Hello WorldSCHED 2014ms: gomaxprocs<span class="token operator">=</span>2 idleprocs<span class="token operator">=</span>2 threads<span class="token operator">=</span>4 spinningthreads<span class="token operator">=</span>0 idlethreads<span class="token operator">=</span>2 runqueue<span class="token operator">=</span>0 <span class="token punctuation">[</span>0 0<span class="token punctuation">]</span>Hello WorldSCHED 3015ms: gomaxprocs<span class="token operator">=</span>2 idleprocs<span class="token operator">=</span>2 threads<span class="token operator">=</span>4 spinningthreads<span class="token operator">=</span>0 idlethreads<span class="token operator">=</span>2 runqueue<span class="token operator">=</span>0 <span class="token punctuation">[</span>0 0<span class="token punctuation">]</span>Hello WorldSCHED 4023ms: gomaxprocs<span class="token operator">=</span>2 idleprocs<span class="token operator">=</span>2 threads<span class="token operator">=</span>4 spinningthreads<span class="token operator">=</span>0 idlethreads<span class="token operator">=</span>2 runqueue<span class="token operator">=</span>0 <span class="token punctuation">[</span>0 0<span class="token punctuation">]</span>Hello World</code></pre><ul><li><code>SCHED</code>：调试信息输出标志字符串，代表本行是goroutine调度器的输出；</li><li><code>0ms</code>：即从程序启动到输出这行日志的时间；</li><li><code>gomaxprocs</code>: P的数量，本例有2个P, 因为默认的P的属性是和cpu核心数量默认一致，当然也可以通过GOMAXPROCS来设置；</li><li><code>idleprocs</code>: 处于idle状态的P的数量；通过gomaxprocs和idleprocs的差值，我们就可知道执行go代码的P的数量；</li><li>t<code>hreads: os threads/M</code>的数量，包含scheduler使用的m数量，加上runtime自用的类似sysmon这样的thread的数量；</li><li><code>spinningthreads</code>: 处于自旋状态的os thread数量；</li><li><code>idlethread</code>: 处于idle状态的os thread的数量；</li><li><code>runqueue=0</code>： Scheduler全局队列中G的数量；</li><li><code>[0 0]</code>: 分别为2个P的local queue中的G的数量。</li></ul><p>下一篇，我们来继续详细的分析GMP调度原理的一些场景问题。</p><h2 id="三、Go调度器调度场景过程全解析"><a href="#三、Go调度器调度场景过程全解析" class="headerlink" title="三、Go调度器调度场景过程全解析"></a>三、Go调度器调度场景过程全解析</h2><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p>P拥有G1，M1获取P后开始运行G1，G1使用<code>go func()</code>创建了G2，为了局部性G2优先加入到P1的本地队列。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/aRCefA.png" alt="GMP场景1"></p><hr><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>G1运行完成后(函数：<code>goexit</code>)，M上运行的goroutine切换为G0，G0负责调度时协程的切换（函数：<code>schedule</code>）。从P的本地队列取G2，从G0切换到G2，并开始运行G2(函数：<code>execute</code>)。实现了线程M1的复用。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/0EyzWq.png" alt="GMP场景2"></p><hr><h3 id="场景3"><a href="#场景3" class="headerlink" title="场景3"></a>场景3</h3><p>假设每个P的本地队列只能存3个G。G2要创建了6个G，前3个G（G3, G4, G5）已经加入p1的本地队列，p1本地队列满了。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/MJEa7u.png" alt="GMP场景3"></p><hr><h3 id="场景4"><a href="#场景4" class="headerlink" title="场景4"></a>场景4</h3><p>G2在创建G7的时候，发现P1的本地队列已满，需要执行<strong>负载均衡</strong>(把P1中本地队列中前一半的G，还有新创建G<strong>转移</strong>到全局队列)</p><blockquote><p>（实现中并不一定是新的G，如果G是G2之后就执行的，会被保存在本地队列，利用某个老的G替换新G加入全局队列）</p></blockquote><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/ttyVlF.png" alt="GMP场景4"></p><p>这些G被转移到全局队列时，会被打乱顺序。所以G3,G4,G7被转移到全局队列。</p><hr><h3 id="场景5"><a href="#场景5" class="headerlink" title="场景5"></a>场景5</h3><p>G2创建G8时，P1的本地队列未满，所以G8会被加入到P1的本地队列。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/QvUTsx.png" alt="GMP场景5"></p><p>G8加入到P1点本地队列的原因还是因为P1此时在与M1绑定，而G2此时是M1在执行。所以G2创建的新的G会优先放置到自己的M绑定的P上。</p><hr><h3 id="场景6"><a href="#场景6" class="headerlink" title="场景6"></a>场景6</h3><p>规定：<strong>在创建G时，运行的G会尝试唤醒其他空闲的P和M组合去执行</strong>。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/LgRBg8.png" alt="GMP场景6"></p><p>假定G2唤醒了M2，M2绑定了P2，并运行G0，但P2本地队列没有G，M2此时为自旋线程<strong>（没有G但为运行状态的线程，不断寻找G）</strong>。</p><hr><h3 id="场景7"><a href="#场景7" class="headerlink" title="场景7"></a>场景7</h3><p>M2尝试从全局队列(简称“GQ”)取一批G放到P2的本地队列（函数：<code>findrunnable()</code>）。M2从全局队列取的G数量符合下面的公式：</p><pre class=" language-go"><code class="language-go">n <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>GQ<span class="token punctuation">)</span><span class="token operator">/</span>GOMAXPROCS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>GQ<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>至少从全局队列取1个g，但每次不要从全局队列移动太多的g到p本地队列，给其他p留点。这是<strong>从全局队列到P本地队列的负载均衡</strong>。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/FzjUNv.jpg" alt="GMP场景7"></p><p>假定我们场景中一共有4个P（GOMAXPROCS设置为4，那么我们允许最多就能用4个P来供M使用）。所以M2只从能从全局队列取1个G（即G3）移动P2本地队列，然后完成从G0到G3的切换，运行G3。</p><hr><h3 id="场景8"><a href="#场景8" class="headerlink" title="场景8"></a>场景8</h3><p>假设G2一直在M1上运行，经过2轮后，M2已经把G7、G4从全局队列获取到了P2的本地队列并完成运行，全局队列和P2的本地队列都空了,如场景8图的左半部分。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/iNrDHo.png" alt="GMP场景8"></p><p><strong>全局队列已经没有G，那m就要执行work stealing(偷取)：从其他有G的P哪里偷取一半G过来，放到自己的P本地队列</strong>。P2从P1的本地队列尾部取一半的G，本例中一半则只有1个G8，放到P2的本地队列并执行。</p><hr><h3 id="场景9"><a href="#场景9" class="headerlink" title="场景9"></a>场景9</h3><p>G1本地队列G5、G6已经被其他M偷走并运行完成，当前M1和M2分别在运行G2和G8，M3和M4没有goroutine可以运行，M3和M4处于<strong>自旋状态</strong>，它们不断寻找goroutine。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/KFvm0g.png" alt="GMP场景9"></p><p>为什么要让m3和m4自旋，自旋本质是在运行，线程在运行却没有执行G，就变成了浪费CPU.  为什么不销毁现场，来节约CPU资源。因为创建和销毁CPU也会浪费时间，我们<strong>希望当有新goroutine创建时，立刻能有M运行它</strong>，如果销毁再新建就增加了时延，降低了效率。当然也考虑了过多的自旋线程是浪费CPU，所以系统中最多有<code>GOMAXPROCS</code>个自旋的线程(当前例子中的<code>GOMAXPROCS</code>=4，所以一共4个P)，多余的没事做线程会让他们休眠。</p><hr><h3 id="场景10"><a href="#场景10" class="headerlink" title="场景10"></a>场景10</h3><p>假定当前除了M3和M4为自旋线程，还有M5和M6为空闲的线程(没有得到P的绑定，注意我们这里最多就只能够存在4个P，所以P的数量应该永远是M&gt;=P, 大部分都是M在抢占需要运行的P)，G8创建了G9，G8进行了<strong>阻塞的系统调用</strong>，M2和P2立即解绑，P2会执行以下判断：如果P2本地队列有G、全局队列有G或有空闲的M，P2都会立马唤醒1个M和它绑定，否则P2则会加入到空闲P列表，等待M来获取可用的p。本场景中，P2本地队列有G9，可以和其他空闲的线程M5绑定。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/RMwOIJ.png" alt="GMP场景10"></p><h3 id="场景11"><a href="#场景11" class="headerlink" title="场景11"></a>场景11</h3><p>G8创建了G9，假如G8进行了<strong>非阻塞系统调用</strong>。</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200701/OYBhz4.png" alt="GMP场景11"></p><p>M2和P2会解绑，但M2会记住P2，然后G8和M2进入<strong>系统调用</strong>状态。当G8和M2退出系统调用时，会尝试获取P2，如果无法获取，则获取空闲的P，如果依然没有，G8会被记为可运行状态，并加入到全局队列,M2因为没有P的绑定而变成休眠状态(长时间休眠等待GC回收销毁)。</p><hr><h2 id="四、小结"><a href="#四、小结" class="headerlink" title="四、小结"></a>四、小结</h2><p>总结，Go调度器很轻量也很简单，足以撑起goroutine的调度工作，并且让Go具有了原生（强大）并发的能力。<strong>Go调度本质是把大量的goroutine分配到少量线程上去执行，并利用多核并行，实现更强大的并发。</strong></p><hr><p>###关于作者：</p><p>作者：<code>Aceld(刘丹冰)</code></p><p>mail: <a href="mailto:danbing.at@gmail.com">danbing.at@gmail.com</a><br>github: <a href="https://github.com/aceld" target="_blank" rel="noopener">https://github.com/aceld</a><br>原创书籍gitbook: <a href="http://legacy.gitbook.com/@aceld" target="_blank" rel="noopener">http://legacy.gitbook.com/@aceld</a></p><h2 id="创作不易-共同学习进步-欢迎关注作者-回复”zinx”有好礼"><a href="#创作不易-共同学习进步-欢迎关注作者-回复”zinx”有好礼" class="headerlink" title="创作不易, 共同学习进步, 欢迎关注作者, 回复”zinx”有好礼"></a>创作不易, 共同学习进步, 欢迎关注作者, 回复”zinx”有好礼</h2><p><img src="https://cdn.learnku.com/uploads/images/202003/12/58489/5cp6UQolTO.jpeg!large" alt="作者微信公众号"></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 调度器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang io 操作</title>
      <link href="/article/c52e9a50.html"/>
      <url>/article/c52e9a50.html</url>
      
        <content type="html"><![CDATA[<h1 id="golang-io-操作"><a href="#golang-io-操作" class="headerlink" title="golang io 操作"></a>golang io 操作</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>格式化输入</li><li>终端输入输出背后的原理</li><li>bufio 包的使用</li><li>命令行参数处理和 urfave/cli 使用</li><li>课后作业</li></ul><h2 id="格式化输入"><a href="#格式化输入" class="headerlink" title="格式化输入"></a>格式化输入</h2><p>从终端获取用户的输入</p><ul><li><code>fmt.Scanf(format string, a...interface{})</code> : 格式化输⼊，空格作为分隔符，占位符和格式化输出一致</li><li><code>fmt.Scan(a ...interface{})</code> : 从终端获取⽤户输⼊，存储在Scanln中的参数里，空格和换行符 作为分隔符</li><li><code>fmt.Scanln(a ...interface{})</code> : 从终端获取用户输入，存储在Scanln中的参数里，空格作为分隔符， 遇到换⾏符结束</li></ul><p>格式化输入背后的原理</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>  firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">,</span> s <span class="token builtin">string</span>  i       <span class="token builtin">int</span>  f       <span class="token builtin">float32</span>  input   <span class="token operator">=</span> <span class="token string">"56.12/5212/Go"</span>  format  <span class="token operator">=</span> <span class="token string">"%f/%d/%s"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Please enter your full name: "</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>firstName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lastName<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// fmt.Scanf("%s %s", &amp;firstName, &amp;lastName)</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hi %s %s!\n"</span><span class="token punctuation">,</span> firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hi Chris Naegels fmt.Sscanf(input, format, &amp;f, &amp;i, &amp;s)</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"From the string we read: "</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>从字符串中获取输入</p><ul><li><code>fmt.Sscanf(str, format string, a...interface{})</code> : 格式化输入，空格作为分隔符，占位符和<br>格式化输出一致</li><li><code>fmt.Sscan(str string, a ...interface{})</code> : 从终端获取⽤用户输入，存储在Scanln中的参数里， 空格和换行符作为分隔符</li><li><code>fmt.Sscanln(str string, a ...interface{})</code> : 从终端获取⽤用户输入，存储在Scanln中的参数里， 空格作为分隔符，遇到换行符结束</li></ul><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><ul><li><code>fmt.Printf(format string, a...interface{})</code> : 格式化输出，并打印到终端</li><li><code>fmt.Println(a ...interface{})</code> : 把零个或多个变量打印到终端， 并换行 </li><li><code>fmt.Print(a ...interface{})</code> : 把零个或多个变量打印到终端</li></ul><p>格式化并返回字符串</p><ul><li><code>fmt.Sprintf(format string, a...interface{})</code> : 格式化并返回字符串</li><li><code>fmt.Sprintln(a ...interface{})</code> : 把零个或多个变量按空格进行格式化并换行，返回字符串 </li><li><code>fmt.Sprint(a ...interface{})</code> : 把零个或多个变量按空格行行格式化，返回字符串</li></ul><h2 id="终端输入输出背后的原理"><a href="#终端输入输出背后的原理" class="headerlink" title="终端输入输出背后的原理"></a>终端输入输出背后的原理</h2><p>终端其实是一个文件</p><ul><li><code>os.Stdin</code>: 标准输入的文件实例，类型为 *File</li><li><code>os.Stdout</code>: 标准输出的文件实例，类型为 *File</li><li><code>os.Stderr</code>: 标准错误输出的文件实例，类型为 *File</li></ul><p>终端的操作</p><ul><li>终端读取操作<ul><li><code>File.Read(b []byte)</code> </li></ul></li><li>终端输出操作<ul><li><code>File.Write(b []byte)</code></li><li><code>File.WriteString(str string)</code></li></ul></li></ul><p>从文件获取输入</p><ul><li><code>fmt.Fscanf(file, format string, a…interface{})</code> : 从⽂件格式化输⼊，空格作为分隔符，占位符和格式化输出⼀致</li><li><code>fmt.Fscan(file, a …interface{})</code> : 从⽂件获取⽤户输⼊，存储在Scanln中的参数⾥，空格和换⾏符作为分隔符</li><li><code>fmt.Fscanln(file, a …interface{})</code> : 从⽂件获取⽤户输⼊，存储在Scanln中的参数⾥，空格作为分隔符，遇到换⾏符结束</li></ul><h2 id="终端读写"><a href="#终端读写" class="headerlink" title="终端读写"></a>终端读写</h2><p>带缓冲区的读写</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"bufio"</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span> <span class="token punctuation">)</span> <span class="token keyword">var</span> inputReader <span class="token operator">*</span>bufio<span class="token punctuation">.</span>Reader<span class="token keyword">var</span> input <span class="token builtin">string</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  inputReader <span class="token operator">=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Please enter some input: "</span><span class="token punctuation">)</span>  input<span class="token punctuation">,</span> err <span class="token operator">=</span> inputReader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"The input was: %s\n"</span><span class="token punctuation">,</span> input<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>如何从终端读取带空格的字符串？</p><blockquote><p>字符串在终端输入加上双引号就可以获取了</p></blockquote><h2 id="命令行参数处理"><a href="#命令行参数处理" class="headerlink" title="命令行参数处理"></a>命令行参数处理</h2><p><code>os.Args</code> 命令行参数的切片</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> who <span class="token operator">:=</span> <span class="token string">"Alice"</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">{</span> who <span class="token operator">+=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Good Morning"</span><span class="token punctuation">,</span> who<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>flag</code>包获取命令行参数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"flag"</span>  <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">parseArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  flag<span class="token punctuation">.</span><span class="token function">IntVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>length<span class="token punctuation">,</span> <span class="token string">"l"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"-l ⽣成密码的长  度"</span><span class="token punctuation">)</span>  flag<span class="token punctuation">.</span><span class="token function">StringVar</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>charset<span class="token punctuation">,</span> <span class="token string">"t"</span><span class="token punctuation">,</span> <span class="token string">"num"</span><span class="token punctuation">,</span>  <span class="token string">`-t 制定密码⽣成的字符集,   num:只使⽤数字[0-9],   char:只使⽤英⽂字母[a-zA-Z],   mix: 使⽤数字和字母，  advance:使⽤数字、字母以及特殊字符`</span><span class="token punctuation">)</span>  flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">parseArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>urave/cli</code> 包的使用</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span> <span class="token string">"os"</span>  <span class="token string">"github.com/urfave/cli"</span><span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    app <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"greet"</span>   app<span class="token punctuation">.</span>Usage <span class="token operator">=</span> <span class="token string">"fight the loneliness!"</span>   app<span class="token punctuation">.</span>Action <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello friend!"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span>   <span class="token punctuation">}</span>    app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><p>获取命令行参数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span> <span class="token string">"os"</span> <span class="token string">"github.com/urfave/cli"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  app <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span>Action <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Hello %q"</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token punctuation">}</span>  app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre><p>获取选项参数</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main <span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"github.com/urfave/cli"</span> <span class="token punctuation">)</span> <span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> language <span class="token builtin">string</span>    <span class="token keyword">var</span> recusive <span class="token builtin">bool</span>    app <span class="token operator">:=</span> cli<span class="token punctuation">.</span><span class="token function">NewApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      app<span class="token punctuation">.</span>Flags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>cli<span class="token punctuation">.</span>Flag<span class="token punctuation">{</span>        cli<span class="token punctuation">.</span>StringFlag<span class="token punctuation">{</span>        Name<span class="token punctuation">:</span> <span class="token string">"lang, l"</span><span class="token punctuation">,</span>        Value<span class="token punctuation">:</span> <span class="token string">"english"</span><span class="token punctuation">,</span>        Usage<span class="token punctuation">:</span> <span class="token string">"language for the greeting"</span><span class="token punctuation">,</span>        Destination<span class="token punctuation">:</span> <span class="token operator">&amp;</span>language<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      cli<span class="token punctuation">.</span>BoolFlag<span class="token punctuation">{</span>        Name<span class="token punctuation">:</span> <span class="token string">"recusive, r"</span><span class="token punctuation">,</span>        Usage<span class="token punctuation">:</span> <span class="token string">"recusive for the greeting"</span><span class="token punctuation">,</span>        Destination<span class="token punctuation">:</span> <span class="token operator">&amp;</span>recusive<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>   app<span class="token punctuation">.</span>Action <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> cmd <span class="token builtin">string</span>      <span class="token keyword">if</span> c<span class="token punctuation">.</span><span class="token function">NArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        cmd <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"cmd is "</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"recusive is "</span><span class="token punctuation">,</span> recusive<span class="token punctuation">)</span>      fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"language is "</span><span class="token punctuation">,</span> language<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token boolean">nil</span>    <span class="token punctuation">}</span>    app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol><li>实现⼀个简易的计算器，⽀持加减乘除以及带括号的计算表达式，⽤户从终端输⼊表达式，<br>程序输出计算结果。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 实现chunk 按照指定个数数组分割</title>
      <link href="/article/b5024495.html"/>
      <url>/article/b5024495.html</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * @param item * @param num * @returns {*} */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">split</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> groupSize <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">/</span> num<span class="token punctuation">)</span> <span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">chunk</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>groupSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param item * @param size * @returns {*} */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">chunk</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> size <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>item<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">=</span>i<span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">{</span>        chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> chunks<span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 面向对象编程</title>
      <link href="/article/804ed534.html"/>
      <url>/article/804ed534.html</url>
      
        <content type="html"><![CDATA[<h1 id="golang-面向对象编程"><a href="#golang-面向对象编程" class="headerlink" title="golang 面向对象编程"></a>golang 面向对象编程</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>struct 声明和定义</li><li>struct 的内存布局以及构造函数</li><li>匿名字段和 struct 嵌套</li><li>struct 与 tag 应用</li><li>课后作业</li></ol><h2 id="struct-声明和定义"><a href="#struct-声明和定义" class="headerlink" title="struct 声明和定义"></a>struct 声明和定义</h2><p>go 中面向对象是通过 struct 来实现的，struct 是用户自定义的类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Useraneme <span class="token builtin">string</span>    Sex       <span class="token builtin">string</span>    Age       <span class="token builtin">int</span>     Avatar    <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：<code>type</code> 是用来定义一种类型 </p></blockquote><p>struct 初始化方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> user Useruser<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span>user<span class="token punctuation">.</span>Username <span class="token operator">=</span> <span class="token string">"user01"</span>user<span class="token punctuation">.</span>Sex <span class="token operator">=</span> <span class="token string">"男"</span>user<span class="token punctuation">.</span>avatar <span class="token operator">=</span> <span class="token string">"https://www.zhanggaoyuan.com"</span></code></pre><blockquote><p>注意: 使用变量名 + “.” + 字段名访问结构体中的字段</p></blockquote><p>struct 初始化方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> user User <span class="token operator">=</span> User<span class="token punctuation">{</span> Username<span class="token punctuation">:</span><span class="token string">"user01"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> Sex<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">,</span> Aratar<span class="token punctuation">:</span><span class="token string">"https://www.zhanggaoyuan.com"</span><span class="token punctuation">}</span></code></pre><p>更简单的写法</p><pre class=" language-go"><code class="language-go">user <span class="token operator">:=</span> User <span class="token punctuation">{</span> Username<span class="token punctuation">:</span><span class="token string">"user01"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span> Sex<span class="token punctuation">:</span><span class="token string">"男"</span><span class="token punctuation">,</span> Aratar<span class="token punctuation">:</span><span class="token string">"https://www.zhanggaoyuan.com"</span><span class="token punctuation">}</span></code></pre><p>struct 初始化的默认值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> user Userfmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%#v\n"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span></code></pre><p>struct 类型的指针</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> user <span class="token operator">*</span>User <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">{</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p %#v\n"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> user <span class="token operator">*</span>User <span class="token operator">=</span> <span class="token operator">&amp;</span>User <span class="token punctuation">{</span>Username<span class="token punctuation">:</span> <span class="token string">"user01"</span><span class="token punctuation">,</span>Age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>Sex<span class="token punctuation">:</span> “男”<span class="token punctuation">,</span>Avatar<span class="token punctuation">:</span> “http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>my<span class="token punctuation">.</span>com<span class="token operator">/</span>xxx<span class="token punctuation">.</span>jpg"<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> user User <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span>user<span class="token punctuation">.</span>Age <span class="token operator">=</span> <span class="token number">18</span>user<span class="token punctuation">.</span>Username <span class="token operator">=</span> <span class="token string">"user01"</span>user<span class="token punctuation">.</span>Sex <span class="token operator">=</span> <span class="token string">"男"</span>user<span class="token punctuation">.</span>Avatar <span class="token operator">=</span> <span class="token string">"http://my.com/xxx.jpg"</span></code></pre><blockquote><p>注意:&amp;User{}和new(User) 本质上是⼀一样的，都是返回⼀一个<br>结构体的地址</p></blockquote><h2 id="struct-内存布局"><a href="#struct-内存布局" class="headerlink" title="struct 内存布局"></a>struct 内存布局</h2><p>结构图的内存布局：占用一段连续的内存空间</p><p><img src="http://cdn.zhanggaoyuan.com/article/20200629/H9EgcJ.png" alt="结构图的内存布局"></p><p>结构体没有构造函数，必要时需要自己实现</p><pre><code>func NewUser(username,sex,aratar string,age int) *User {  return &amp;User{    Username : username,    Age: age,    Sex: sex,    Avatar: aratar,  }}</code></pre><h2 id="匿名字段和嵌套"><a href="#匿名字段和嵌套" class="headerlink" title="匿名字段和嵌套"></a>匿名字段和嵌套</h2><p>匿名字段：即没有名字的字段</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span><span class="token punctuation">{</span>   Username   <span class="token builtin">string</span>   Sex        <span class="token builtin">string</span>   Age        <span class="token builtin">int</span>    Avarar     <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Username  <span class="token builtin">string</span>    Sex       <span class="token builtin">string</span>    Age       <span class="token builtin">int</span>    Avatar    <span class="token builtin">string</span>    <span class="token builtin">int</span>     <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><blockquote><p>注意：匿名字段默认采用类型名作为字段名</p></blockquote><p>结构体嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>    City           <span class="token builtin">string</span>    Province       <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>   Username  <span class="token builtin">string</span>   Sex       <span class="token builtin">string</span>   Age       <span class="token builtin">int</span>   Avatar    <span class="token builtin">string</span>   address   Address<span class="token punctuation">}</span></code></pre><p>匿名结构体</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>   City      <span class="token builtin">string</span>   Province  <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>   Username  <span class="token builtin">string</span>   Sex       <span class="token builtin">string</span>   Age       <span class="token builtin">int</span>   AvatarUrl <span class="token builtin">string</span>   Address<span class="token punctuation">}</span></code></pre><p>匿名结构体与继承</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">struct</span> <span class="token punctuation">{</span>   City           <span class="token builtin">string</span>   Province       <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>   Username  <span class="token builtin">string</span>   Sex       <span class="token builtin">string</span>   Age       <span class="token builtin">int</span>   AvatarUrl <span class="token builtin">string</span>   Address<span class="token punctuation">}</span></code></pre><p>冲突解决</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Address <span class="token keyword">struct</span> <span class="token punctuation">{</span>    City       <span class="token builtin">string</span>    Province   <span class="token builtin">string</span>    CreateTime <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Email <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Account    <span class="token builtin">string</span>    CreateTime <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Username <span class="token builtin">string</span>    Sex      <span class="token builtin">string</span>    Age      <span class="token builtin">int</span>    Avatar   <span class="token builtin">string</span>    Address    Email    CreateTime <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><h2 id="结构体与-tag-应用"><a href="#结构体与-tag-应用" class="headerlink" title="结构体与 tag 应用"></a>结构体与 <code>tag</code> 应用</h2><p>字段可见性，大写表达可公开访问，小写表示私有</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Username <span class="token builtin">string</span>    Sex      <span class="token builtin">string</span>    Age      <span class="token builtin">int</span>    avatar   <span class="token builtin">string</span>    CreateTime <span class="token builtin">string</span><span class="token punctuation">}</span></code></pre><p><code>tag</code> 是结构体的元信息，可以在运行的时候通过反射的机制读取出来</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Username   <span class="token builtin">string</span> <span class="token string">`json:"username"`</span>    Sex        <span class="token builtin">string</span> <span class="token string">`json:"sex"`</span>    Age        <span class="token builtin">int</span>    <span class="token string">`json:"age"`</span>    avatar     <span class="token builtin">string</span>    CreateTime <span class="token builtin">string</span> <span class="token string">`json:"create_time"`</span><span class="token punctuation">}</span></code></pre><blockquote><p>字段类型后面，以反括号起来的 key-value 结构图的字符串，多个 <code>tag</code> 以逗号隔开</p></blockquote><h2 id="结构体的方法定义"><a href="#结构体的方法定义" class="headerlink" title="结构体的方法定义"></a>结构体的方法定义</h2><p>和其他语⾔言不一样，Go的⽅法采⽤用另外一种方式实现</p><p>Go的方法是在函数前⾯面加上一个接受者，这样编译器器就知道这个⽅法属于哪个类型了</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">Test</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.zhanggaoyuan.com/article/20200629/BIrD0c.png" alt="结构体接受者"></p><p>可以为当前包内定义的任何类型增加⽅方法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">int</span> Integer <span class="token comment" spellcheck="true">//Integer是int的别名</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a Integer<span class="token punctuation">)</span> <span class="token function">Test</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p><img src="http://cdn.zhanggaoyuan.com/article/20200629/Qe5Alf.png" alt="结构体别名方法"></p><h2 id="函数和⽅方法的区别"><a href="#函数和⽅方法的区别" class="headerlink" title="函数和⽅方法的区别"></a>函数和⽅方法的区别</h2><p>函数不不属于任何类型，⽅方法属于特定的类型</p><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol><li>实现⼀一个简单的学⽣生管理理系统，每个学⽣生有分数、年年级、性别、名字等 字段，⽤用户可以在控制台添加学⽣生、修改学⽣生信息、打印所有学⽣生列列表<br>的功能。</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">type</span> Student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Username <span class="token builtin">string</span>    Sex      <span class="token builtin">int</span>    Score    <span class="token builtin">float32</span>    Grade    <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewStudent</span><span class="token punctuation">(</span>username <span class="token builtin">string</span><span class="token punctuation">,</span> sex <span class="token builtin">int</span><span class="token punctuation">,</span> score <span class="token builtin">float32</span><span class="token punctuation">,</span> grade <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>stu <span class="token operator">*</span>Student<span class="token punctuation">)</span> <span class="token punctuation">{</span>    stu <span class="token operator">=</span> <span class="token operator">&amp;</span>Student<span class="token punctuation">{</span>        Username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>        Sex<span class="token punctuation">:</span>      sex<span class="token punctuation">,</span>        Score<span class="token punctuation">:</span>    score<span class="token punctuation">,</span>        Grade<span class="token punctuation">:</span>    grade<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token builtin">int</span>    <span class="token keyword">var</span> d <span class="token builtin">string</span>    fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    AllStudents <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Student<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">showMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"1. add student"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"2. modify student"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"3. show all student"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"4. exited\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">inputStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>Student <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        username <span class="token builtin">string</span>        sex      <span class="token builtin">int</span>        grade    <span class="token builtin">string</span>        score    <span class="token builtin">float32</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"please input username:"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>username<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"please input sex:[0|1]"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sex<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"please input grade:[0-6]"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>grade<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"please input score:[0-100]"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>score<span class="token punctuation">)</span>    stu <span class="token operator">:=</span> <span class="token function">NewStudent</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> score<span class="token punctuation">,</span> grade<span class="token punctuation">)</span>    <span class="token keyword">return</span> stu<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AddStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stu <span class="token operator">:=</span> <span class="token function">inputStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> AllStudents <span class="token punctuation">{</span>        <span class="token keyword">if</span> v<span class="token punctuation">.</span>Username <span class="token operator">==</span> stu<span class="token punctuation">.</span>Username <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"user %s success update\n\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>Username<span class="token punctuation">)</span>            AllStudents<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> stu            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    AllStudents <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>AllStudents<span class="token punctuation">,</span> stu<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user %s success insert\n\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>Username<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ModifyStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stu <span class="token operator">:=</span> <span class="token function">inputStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> AllStudents <span class="token punctuation">{</span>        <span class="token keyword">if</span> v<span class="token punctuation">.</span>Username <span class="token operator">==</span> stu<span class="token punctuation">.</span>Username <span class="token punctuation">{</span>            AllStudents<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> stu            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user %s success update\n\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>Username<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user %s is not found\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">.</span>Username<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ShowAllStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> AllStudents <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user:%s info:%#v\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        <span class="token function">showMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">var</span> sel <span class="token builtin">int</span>        fmt<span class="token punctuation">.</span><span class="token function">Scanf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sel<span class="token punctuation">)</span>        <span class="token keyword">switch</span> sel <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token function">AddStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token function">ModifyStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token function">ShowAllStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对应的 github <a href="https://github.com/JeffreyBool/go-practice/tree/master/golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/listen6" target="_blank" rel="noopener">地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang package</title>
      <link href="/article/e0743927.html"/>
      <url>/article/e0743927.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>go源码组织方式</li><li>main 函数和 main 包</li><li>自定义包</li><li>init 函数以及执行顺序</li><li>课后作业</li></ol><h2 id="go-的源码组织方式"><a href="#go-的源码组织方式" class="headerlink" title="go 的源码组织方式"></a>go 的源码组织方式</h2><ol><li><p>go 通过 package 的方式来组织源码</p></li><li><p>package 包名</p></li></ol><ul><li>注意：任何一个源码都属于一个包</li><li>作用：代码复用和可读性</li></ul><h2 id="main-函数和-main-包"><a href="#main-函数和-main-包" class="headerlink" title="main 函数和 main 包"></a>main 函数和 main 包</h2><ol><li>可执行程序的包名必须为 main，并且包含一个 main 函数</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="2"><li><p>package 组织案例<br><img src="../images/6A190F82EFF2E52B82A1D7AD0E39F959.jpg" alt="package 组织案例"></p></li><li><p>链接过程<br><img src="../images/5A5C93AE-DB15-4700-8F9B-2BEA87D2EA21.png" alt="链接过程"></p></li></ol><h2 id="自定义包"><a href="#自定义包" class="headerlink" title="自定义包"></a>自定义包</h2><ol><li>除了可执行程序之外，用户可以写自定义包，自定义包编译成静态库</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> calc<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre><ol start="2"><li>导出变量或函数。首字母大写表示可导出，小写表示私有。不能被外部的包访问</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> calc<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre><h2 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h2><ol><li><code>go run</code>  运行 go 代码，如果有多个文件，需要把所有文件都写到 <code>go run</code> 后面</li><li><code>go bulid</code> 编译 go 代码，如果是可执行程序， 默认会在当前目录生成可执行程序，可以使用 <code>-o</code> 指定可执行程序程序生成的目录。</li><li><code>go install</code> 编译 go 代码，并且把可执行程序拷贝到  GOPATH 的 <code>bin</code> 目录，自定义或者第三方包会拷贝到 GOPATH 的 <code>pkg</code>，目录</li></ol><h2 id="init-函数"><a href="#init-函数" class="headerlink" title="init 函数"></a>init 函数</h2><ol><li>一个包里可以有 0个或多个 init 函数，在程序启动时会被自动调用</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> calc<span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre><p><img src="../images/92B319DE-5966-494A-B708-74AC4DD6533A.png" alt="init 函数执行过程"></p><blockquote><p>总结：先执行全局变量是初始化 –&gt; 然后再执行 init 函数 –&gt; 最后执行 main 函数</p></blockquote><ol start="2"><li>如果一个包 import 另外一个包<br><img src="../images/4DAA696D-1D88-4352-8979-C4C0BBDF3A6C.png" alt="多个 init 函数执行流程"></li></ol><h2 id="标示符"><a href="#标示符" class="headerlink" title="标示符"></a>标示符</h2><p><code>_</code> 标示符的另外一种用法</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> calc <span class="token keyword">import</span> <span class="token punctuation">(</span> <span class="token string">"fmt"</span> <span class="token boolean">_</span> <span class="token string">"sub"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span></code></pre><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol><li>你有50枚⾦金金币，需要分配给以下⼏几个⼈人:Matthew, Sarah, Augustus, Heidi, Emilie,<br>Peter, Giana, Adriano, Aaron, Elizabeth。分配规则如下所示:</li></ol><ul><li>a. 名字中包含’a’或’A’: 1枚⾦金金币 </li><li>b. 名字中包含’e’或’E’: 1枚⾦金金币 </li><li>c. 名字中包含 ‘i’或’I’: 2枚⾦金金币 </li><li>d. 名字中包含’o’或’O’: 3枚⾦金金币 </li><li>e. 名字中包含’u’或’U’: 5枚⾦金金币</li></ul><p>写一个程序，计算每个⽤用户分到了了多少⾦金金币，以及最后剩余多少⾦金金币?</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    coins <span class="token operator">=</span> <span class="token number">100</span>    users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>        <span class="token string">"Matthew"</span><span class="token punctuation">,</span> <span class="token string">"Sarah"</span><span class="token punctuation">,</span> <span class="token string">"Augustus"</span><span class="token punctuation">,</span> <span class="token string">"Heidi"</span><span class="token punctuation">,</span> <span class="token string">"Emilie"</span><span class="token punctuation">,</span>        <span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token string">"Giana"</span><span class="token punctuation">,</span> <span class="token string">"Adriano"</span><span class="token punctuation">,</span> <span class="token string">"Aaron"</span><span class="token punctuation">,</span> <span class="token string">"Elizabeth"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    distribution <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">calcCoin</span><span class="token punctuation">(</span>username <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> char <span class="token operator">:=</span> <span class="token keyword">range</span> username <span class="token punctuation">{</span>        <span class="token keyword">switch</span> char <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">case</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">2</span>        <span class="token keyword">case</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">3</span>        <span class="token keyword">case</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">:</span>            sum <span class="token operator">=</span> sum <span class="token operator">+</span> <span class="token number">5</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">dispatchCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> left <span class="token builtin">int</span> <span class="token operator">=</span> coins    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> username <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span>        allCoin <span class="token operator">:=</span> <span class="token function">calcCoin</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>        left <span class="token operator">=</span> left <span class="token operator">-</span> allCoin        value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> distribution<span class="token punctuation">[</span>username<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            distribution<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> allCoin        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            distribution<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> value <span class="token operator">+</span> allCoin        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> left<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    left <span class="token operator">:=</span> <span class="token function">dispatchCoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> username<span class="token punctuation">,</span> coin <span class="token operator">:=</span> <span class="token keyword">range</span> distribution <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user:%s have %d coins\n"</span><span class="token punctuation">,</span> username<span class="token punctuation">,</span> coin<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"left coin:%d\n"</span><span class="token punctuation">,</span> left<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang map 类型</title>
      <link href="/article/cf91f0fa.html"/>
      <url>/article/cf91f0fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><ol><li>map 循环</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"stu%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        value <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">}</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"map[%s]=%d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>map拷贝</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a<span class="token punctuation">[</span><span class="token string">"modify001"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a:%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// a["stu01"] = 100 # map 没有进行初始化，会发生 panic</span>    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">"stu01"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu02"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu02"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%#v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    b <span class="token operator">:=</span> a    b<span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"after modify a:%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"after modify a:%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>map 删除</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a:%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//a["stu01"] = 100</span>    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">"stu01"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu02"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%#v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token function">delete</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"stu02"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%#v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>        <span class="token function">delete</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"after delete a=%#v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>判断 map 是否存在</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">"stu01"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu02"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%#v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">var</span> <span class="token punctuation">(</span>        result <span class="token builtin">int</span>        ok     <span class="token builtin">bool</span>    <span class="token punctuation">)</span>    result<span class="token punctuation">,</span> ok <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key %s is not exist\n"</span><span class="token punctuation">,</span> <span class="token string">"stu03"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key %s is %d\n"</span><span class="token punctuation">,</span> <span class="token string">"stu03"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>map 初始化</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>        <span class="token string">"stu01"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">"stu02"</span><span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>        <span class="token string">"stu03"</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">"stu01"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88888</span>    a<span class="token punctuation">[</span><span class="token string">"stu04"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">38333</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">var</span> key <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"stu04"</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"the value of  key[%s] is :%d\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> a<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="6"><li>nil map</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a:%v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>    a<span class="token punctuation">[</span><span class="token string">"stu01"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    a<span class="token punctuation">[</span><span class="token string">"stu02"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2000</span>    a<span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%#v\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="7"><li>map slice</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">mapSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>    s <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    key <span class="token operator">:=</span> <span class="token string">"stu01"</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        s<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        value <span class="token operator">=</span> s<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    value <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>    value <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>    s<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"map:%v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">sliceMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span>    s <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice[%d]=%v\n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"stu01"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"stu02"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span>    s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"stu03"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">mapSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">sliceMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="8"><li>map sort</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span>    <span class="token string">"sort"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> a <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        key <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"stu%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        value <span class="token operator">:=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>        a<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">}</span>    <span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token keyword">range</span> a <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//fmt.Printf("map[%s]=%d\n",key,value)</span>        keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span>key<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    sort<span class="token punctuation">.</span><span class="token function">Strings</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>value <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key:%s val:%d\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> a<span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol><li>写一个程序，统计一个字符串每个单词出现的次数。比如： s = “how do you do”, 输出 how = 1 do = 2 you = 1</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">statWordCount</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>result <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    words <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> words <span class="token punctuation">{</span>        count<span class="token punctuation">,</span> ok <span class="token operator">:=</span> result<span class="token punctuation">[</span>v<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">"how do you do ? do you like me ?"</span>    result <span class="token operator">:=</span> <span class="token function">statWordCount</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"result:%#v\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>写一个，实现学生信息的存储，学生有 ID 、年龄、分数等信息。需要非常方便的用过 ID 查找到对应的学生的信息。</li></ol><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"math/rand"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">testInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>    <span class="token keyword">var</span> c <span class="token builtin">float32</span> <span class="token operator">=</span> <span class="token number">1.2</span>    <span class="token keyword">var</span> d <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"hello"</span>    a <span class="token operator">=</span> b    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    a <span class="token operator">=</span> c    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    a <span class="token operator">=</span> d    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a=%v\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">studentStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> stuMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    stuMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//插入学生id=1，姓名=stu01, 分数=78.2, 年龄= 18</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"stu01"</span>    <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">78.2</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> stuMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>        value <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    value<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> name    value<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> id    value<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span> <span class="token operator">=</span> score    value<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> age    stuMap<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> value    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"stuMap:%#v\n"</span><span class="token punctuation">,</span> stuMap<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> stuMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>            value <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        value<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"stu%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        value<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        value<span class="token punctuation">[</span><span class="token string">"score"</span><span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Float32</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100.0</span>        value<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span> <span class="token operator">=</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        stuMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> stuMap <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"id=%d stu info=%#v\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//testInterface()</span>    <span class="token function">studentStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 指针类型</title>
      <link href="/article/26aebb10.html"/>
      <url>/article/26aebb10.html</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li>变量和内存地址</li><li>指针类型</li><li>值拷贝和引用拷贝</li><li>课后练习</li></ol><h2 id="golang-指针类型"><a href="#golang-指针类型" class="headerlink" title="golang 指针类型"></a>golang 指针类型</h2><ol><li><p>每个变量都有内存地址，可以说通过变量来操作对应大小的内存</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int32</span>a <span class="token operator">=</span> <span class="token number">100</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span></code></pre><p>注意：通过 <code>&amp;</code> 符号可以获取变量的地址</p></li><li><p>普通的变量存储的是对应类型的值，这些类型就叫 <code>值类型</code></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> b <span class="token builtin">int32</span>b <span class="token operator">=</span> <span class="token number">156</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>d\n”<span class="token punctuation">,</span> b<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>“<span class="token operator">%</span>p\n”<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span></code></pre><p><img src="../images/%E6%8C%87%E9%92%88%E5%9C%B0%E5%9D%80.jpg" alt="指针地址"></p></li><li><p>指针类型的变量存储的是一个地址，所以又叫指针类型或者引用类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> b <span class="token builtin">int32</span>b <span class="token operator">=</span> <span class="token number">156</span><span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int32</span>a <span class="token operator">=</span> <span class="token operator">&amp;</span>b</code></pre><p><img src="../images/E8C6A43126330AD2B09A51E5CAE0B16C.png" alt="指针类型"></p></li><li><p>指针类型定义，var 变量名 *类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  b <span class="token operator">:=</span> <span class="token number">255</span> <span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>b fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Type of a is %T\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of b is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>执行类型变量的默认值为 nil, 也就是空地址</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">:=</span> <span class="token number">25</span> <span class="token keyword">var</span> b <span class="token operator">*</span><span class="token builtin">int</span> <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>     b <span class="token operator">=</span> <span class="token operator">&amp;</span>a     fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b after initialization is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>如果操作指针变量地址的地址里面的值呢？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>b <span class="token operator">:=</span> <span class="token number">255</span>a <span class="token operator">:=</span> <span class="token operator">&amp;</span>bfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of b is"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of b is"</span><span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p> <em>注意：通过 <code>*</code> 可以获取指针变量指向的变量`</em></p></li><li><p>通过指针修改变量的值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span><span class="token number">255</span>a <span class="token operator">:=</span> <span class="token operator">&amp;</span>bfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address os b is"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of b is"</span><span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">*</span>a <span class="token operator">++</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new value of b is"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>指针变量传参</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>val <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>val <span class="token operator">=</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">:=</span> <span class="token number">58</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a before function call is"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span> b <span class="token operator">:=</span> <span class="token operator">&amp;</span>a <span class="token function">change</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of a before function call is"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>指针变量传参示例2</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>arr <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token operator">*</span>arr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">}</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>切片传参</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>sls <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>sls<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">}</span><span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ol><p><em>注意： 切片是引用类型</em> </p><ol start="11"><li><p><code>make</code> 用来分配引用类型的内存，比如 <code>map</code> 、<code>slice</code> 以及 <code>channel</code>, <code>new</code> 用来分配除引用类型的所有其他类型的内存，比如 <code>int</code> 数组等</p></li><li><p>值拷贝和引用拷贝</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span>b <span class="token operator">:=</span> a<span class="token punctuation">}</span></code></pre><p><img src="../images/30481C68451B12FC4972E52BC66C58EF.jpg" alt="值拷贝"></p></li><li><p>值拷贝和引用拷贝</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> b <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token keyword">var</span> c <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> b<span class="token operator">*</span>c <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">}</span></code></pre><p><img src="../images/5EE66F82-077E-4DED-BA37-F9A219FE636D.png" alt="值拷贝和引用拷贝"></p></li></ol><h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol><li><p>写一个程序，获取一个变量的地址，并打印到终端。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">var</span> a <span class="token builtin">int</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Scanln</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"address a of:%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>写一个函数，传入一个 int 类型的指针，并在函数中修改锁指向的值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"before modify: %d addr:%p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"after modify: %d addr:%p\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>交换两个变量的值</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token operator">*</span>afmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"after a=%d b=%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"in main a=%d b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestPoint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">int32</span>    a <span class="token operator">=</span> <span class="token number">1000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"the addr of a :%p, a:%d\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>    <span class="token keyword">var</span> b <span class="token operator">*</span><span class="token builtin">int32</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"the addr of b: %p, b:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b is nil addr"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//*b = 100</span>    b <span class="token operator">=</span> <span class="token operator">&amp;</span>a    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"the addr of b: %p, b:%v\n"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">200</span>    <span class="token keyword">var</span> b <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b指向的地址存储的值为:%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>    <span class="token operator">*</span>b <span class="token operator">=</span> <span class="token number">1000</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b指向的地址储存的值为:%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a = %d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">modify</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    p <span class="token operator">:=</span> <span class="token operator">&amp;</span>b    <span class="token function">modify</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b:%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">modify_arr</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>    <span class="token function">modify_arr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b:%v\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span>    <span class="token function">modify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*a=%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span>    <span class="token keyword">var</span> b <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*b = %v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">100</span>    <span class="token punctuation">(</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*b = %v\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">modifyInt</span><span class="token punctuation">(</span>a <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">10</span>    <span class="token function">modifyInt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"b=%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint7</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">var</span> b <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a    <span class="token keyword">var</span> c <span class="token operator">*</span><span class="token builtin">int</span> <span class="token operator">=</span> b    <span class="token operator">*</span>c <span class="token operator">=</span> <span class="token number">200</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"*c=%d *b=%d a=%d\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>c<span class="token punctuation">,</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> <span class="token number">255</span>    a <span class="token operator">:=</span> <span class="token operator">&amp;</span>b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address of b is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of b is"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">testPoint9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    b <span class="token operator">:=</span> <span class="token number">255</span>    a <span class="token operator">:=</span> <span class="token operator">&amp;</span>b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"address os b is"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"value of b is"</span><span class="token punctuation">,</span> <span class="token operator">*</span>a<span class="token punctuation">)</span>    <span class="token operator">*</span>a <span class="token operator">++</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"new value of b is"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">TestPoint1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint4</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint6</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint7</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint8</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">testPoint9</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>教程对应<a href="https://github.com/JeffreyBool/go-practice/tree/master/golang%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/listen3" target="_blank" rel="noopener">github地址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Laravel 命令行开发 API 代码生成器</title>
      <link href="/article/9e380d0.html"/>
      <url>/article/9e380d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-命令行文件生成"><a href="#1-命令行文件生成" class="headerlink" title="1. 命令行文件生成"></a>1. 命令行文件生成</h2><pre class=" language-bash"><code class="language-bash">$ php artisan make:command ApiGenerator</code></pre><h2 id="2-编写代码模板"><a href="#2-编写代码模板" class="headerlink" title="2. 编写代码模板"></a>2. 编写代码模板</h2><p>就像你看到的，我使用了 php 的 <code>heredoc</code> 方式，不太优雅。开始用的文件方式，但是不支持替换数组，就放弃了；有好的建议欢迎提。</p><p><code>App\Traits\GeneratorTemplate</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Created by PhpStorm. * User: JeffreyBool * Date: 2019/11/18 * Time: 01:20 */</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Traits</span><span class="token punctuation">;</span><span class="token keyword">trait</span> <span class="token class-name">GeneratorTemplate</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 创建验证模板.     * @param $dummyNamespace     * @param $modelName     * @param $storeRules     * @param $updateRules     * @param $storeMessages     * @param $updateMessages     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">genValidationTemplate</span><span class="token punctuation">(</span>        <span class="token variable">$dummyNamespace</span><span class="token punctuation">,</span>        <span class="token variable">$modelName</span><span class="token punctuation">,</span>        <span class="token variable">$storeRules</span><span class="token punctuation">,</span>        <span class="token variable">$updateRules</span><span class="token punctuation">,</span>        <span class="token variable">$storeMessages</span><span class="token punctuation">,</span>        <span class="token variable">$updateMessages</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 新增验证规则         */</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token string">'rules'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$storeRules</span><span class="token punctuation">,</span>            <span class="token string">'messgaes'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$storeMessages</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 编辑验证规则     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>           <span class="token string">'rules'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$updateRules</span><span class="token punctuation">,</span>           <span class="token string">'messgaes'</span><span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$updateMessages</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token constant">EOF</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建资源返回模板.     * @param $dummyNamespace     * @param $modelName     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">genResourceTemplate</span><span class="token punctuation">(</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">,</span> <span class="token variable">$modelName</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Resources<span class="token punctuation">\</span>Json<span class="token punctuation">\</span>JsonResource</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span>Resource <span class="token keyword">extends</span> <span class="token class-name">JsonResource</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Transform the resource into an array.     *     * @param  \Illuminate\Http\Request  \$request     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">toArray</span><span class="token punctuation">(</span>\<span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">toArray</span><span class="token punctuation">(</span>\<span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token constant">EOF</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建控制器模板.     * @param $dummyNamespace     * @param $modelName     * @param $letterModelName     * @param $modelNamePluralLowerCase     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">genControllerTemplate</span><span class="token punctuation">(</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">,</span> <span class="token variable">$modelName</span><span class="token punctuation">,</span> <span class="token variable">$letterModelName</span><span class="token punctuation">,</span> <span class="token variable">$modelNamePluralLowerCase</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Models<span class="token punctuation">\</span><span class="token punctuation">\</span></span><span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Resources<span class="token punctuation">\</span><span class="token punctuation">\</span></span><span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span>Resource<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span>Controller <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Get {$modelName} Paginate.     * @param {$modelName} \${$letterModelName}     * @return \Illuminate\Http\Resources\Json\AnonymousResourceCollection     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        \$<span class="token punctuation">{</span><span class="token variable">$modelNamePluralLowerCase</span><span class="token punctuation">}</span> <span class="token operator">=</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span>Resource<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">collection</span><span class="token punctuation">(</span>\$<span class="token punctuation">{</span><span class="token variable">$modelNamePluralLowerCase</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create {$modelName}.     * @param Request         \$request     * @param {$modelName} \${$letterModelName}     * @return \Illuminate\Http\Response     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">store</span><span class="token punctuation">(</span>Request \<span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        \<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validateRequest</span><span class="token punctuation">(</span>\<span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fill</span><span class="token punctuation">(</span>\<span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> \<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">created</span><span class="token punctuation">(</span>\$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * All {$modelName}.     * @param Request         \$request     * @param {$modelName} \${$letterModelName}     * @return \Illuminate\Http\Resources\Json\AnonymousResourceCollection     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">all</span><span class="token punctuation">(</span>Request \<span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       \$<span class="token punctuation">{</span><span class="token variable">$modelNamePluralLowerCase</span><span class="token punctuation">}</span> <span class="token operator">=</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span>Resource<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">collection</span><span class="token punctuation">(</span>\$<span class="token punctuation">{</span><span class="token variable">$modelNamePluralLowerCase</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Show {$modelName}.     * @param {$modelName} \${$letterModelName}     * @return {$modelName}Resource     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span><span class="token function">Resource</span><span class="token punctuation">(</span>\$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Update {$modelName}.     * @param Request         \$request     * @param {$modelName} \${$letterModelName}     * @return \Illuminate\Http\Response     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span>Request \<span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        \<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validateRequest</span><span class="token punctuation">(</span>\<span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fill</span><span class="token punctuation">(</span>\<span class="token variable">$request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> \<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">noContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Delete {$modelName}.     * @param {$modelName} \${$letterModelName}     * @return \Illuminate\Contracts\Routing\ResponseFactory|\Illuminate\Http\Response     * @throws \Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        \$<span class="token punctuation">{</span><span class="token variable">$letterModelName</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> \<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">noContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token constant">EOF</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建模型模板.     * @param $dummyNamespace     * @param $modelName     * @param $fields     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">genModelTemplate</span><span class="token punctuation">(</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">,</span> <span class="token variable">$modelName</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$template</span> <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token punctuation">{</span><span class="token variable">$dummyNamespace</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token punctuation">{</span><span class="token variable">$modelName</span><span class="token punctuation">}</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> \<span class="token variable">$fillable</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token variable">$fields</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token constant">EOF</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$template</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="3-实现代码生成器"><a href="#3-实现代码生成器" class="headerlink" title=" 3. 实现代码生成器"></a> 3. 实现代码生成器</h2><p>现在让我们来实现第 1 步所创建的控制台命令。<br>在 <code>app/Console/Commands</code> 文件夹找到 <code>ApiGenerator.php</code></p><p>当然，该命令还没有设置，这就是为什么你看到一个默认的名称和说明。</p><p>修改命令标志和描述，如下：</p><pre class=" language-php"><code class="language-php">    <span class="token comment" spellcheck="true">/**     * The name and signature of the console command.     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$signature</span> <span class="token operator">=</span> 'api<span class="token punctuation">:</span>generator    <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token keyword">Class</span> <span class="token punctuation">(</span>singular<span class="token punctuation">)</span> <span class="token keyword">for</span> example User<span class="token punctuation">}</span>'<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The console command description.     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string">'Create Api operations'</span><span class="token punctuation">;</span></code></pre><p>描述要简洁、明了。</p><p>至于命令标志，可以根据个人喜好命名，就是后面我们要调用的 artisan 命令，如下：</p><pre class=" language-bash"><code class="language-bash">$ php artisan api:generator RoleMenu</code></pre><h3 id="接下来实现数据库表结构读取"><a href="#接下来实现数据库表结构读取" class="headerlink" title="接下来实现数据库表结构读取"></a>接下来实现数据库表结构读取</h3><p><code>App\Traits\MysqlStructure.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Traits</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Collection</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Facades<span class="token punctuation">\</span>DB</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Console<span class="token punctuation">\</span>Exception<span class="token punctuation">\</span>RuntimeException</span><span class="token punctuation">;</span><span class="token keyword">trait</span> <span class="token class-name">MysqlStructure</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$database</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$doctrineTypeMapping</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'tinyint'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'boolean'</span><span class="token punctuation">,</span>        <span class="token string">'smallint'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'smallint'</span><span class="token punctuation">,</span>        <span class="token string">'mediumint'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'integer'</span><span class="token punctuation">,</span>        <span class="token string">'int'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'integer'</span><span class="token punctuation">,</span>        <span class="token string">'integer'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'integer'</span><span class="token punctuation">,</span>        <span class="token string">'bigint'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'bigint'</span><span class="token punctuation">,</span>        <span class="token string">'tinytext'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text'</span><span class="token punctuation">,</span>        <span class="token string">'mediumtext'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text'</span><span class="token punctuation">,</span>        <span class="token string">'longtext'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text'</span><span class="token punctuation">,</span>        <span class="token string">'text'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'text'</span><span class="token punctuation">,</span>        <span class="token string">'varchar'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'string'</span><span class="token punctuation">,</span>        <span class="token string">'string'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'string'</span><span class="token punctuation">,</span>        <span class="token string">'char'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'string'</span><span class="token punctuation">,</span>        <span class="token string">'date'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'date'</span><span class="token punctuation">,</span>        <span class="token string">'datetime'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'datetime'</span><span class="token punctuation">,</span>        <span class="token string">'timestamp'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'datetime'</span><span class="token punctuation">,</span>        <span class="token string">'time'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'time'</span><span class="token punctuation">,</span>        <span class="token string">'float'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'float'</span><span class="token punctuation">,</span>        <span class="token string">'double'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'float'</span><span class="token punctuation">,</span>        <span class="token string">'real'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'float'</span><span class="token punctuation">,</span>        <span class="token string">'decimal'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'decimal'</span><span class="token punctuation">,</span>        <span class="token string">'numeric'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'decimal'</span><span class="token punctuation">,</span>        <span class="token string">'year'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'date'</span><span class="token punctuation">,</span>        <span class="token string">'longblob'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'blob'</span><span class="token punctuation">,</span>        <span class="token string">'blob'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'blob'</span><span class="token punctuation">,</span>        <span class="token string">'mediumblob'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'blob'</span><span class="token punctuation">,</span>        <span class="token string">'tinyblob'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'blob'</span><span class="token punctuation">,</span>        <span class="token string">'binary'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'binary'</span><span class="token punctuation">,</span>        <span class="token string">'varbinary'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'binary'</span><span class="token punctuation">,</span>        <span class="token string">'set'</span>        <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'simple_array'</span><span class="token punctuation">,</span>        <span class="token string">'json'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'json'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 表字段类型替换成laravel字段类型     * @param string $table     * @return Collection     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">tableFieldsReplaceModelFields</span><span class="token punctuation">(</span>string <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Collection    <span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = \'%s\' AND TABLE_NAME = \'%s\' '</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$columns</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'Not Found Table, got "%s".'</span><span class="token punctuation">,</span> <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$columns</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$column</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">DATA_TYPE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">DATA_TYPE</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">doctrineTypeMapping</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">DATA_TYPE</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">doctrineTypeMapping</span><span class="token punctuation">[</span><span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">DATA_TYPE</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$column</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$columns</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取数据库所有表     * @return array     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getAllTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$tables</span> <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">'show tables'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$box</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">'Tables_in_'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$tables</span> <span class="token keyword">as</span> <span class="token variable">$tableName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$tableName</span> <span class="token operator">=</span> <span class="token variable">$tableName</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$key</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tableName</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$box</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 输出表信息     * @param $tableName     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">outTableAction</span><span class="token punctuation">(</span><span class="token variable">$tableName</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTableColumns</span><span class="token punctuation">(</span><span class="token variable">$tableName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rows</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$columns</span> <span class="token keyword">as</span> <span class="token variable">$column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$rows</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">COLUMN_NAME</span><span class="token punctuation">,</span>                <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">COLUMN_TYPE</span><span class="token punctuation">,</span>                <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">COLUMN_DEFAULT</span><span class="token punctuation">,</span>                <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">IS_NULLABLE</span><span class="token punctuation">,</span>                <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">EXTRA</span><span class="token punctuation">,</span>                <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">COLUMN_COMMENT</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'COLUMN'</span><span class="token punctuation">,</span> <span class="token string">'TYPE'</span><span class="token punctuation">,</span> <span class="token string">'DEFAULT'</span><span class="token punctuation">,</span> <span class="token string">'NULLABLE'</span><span class="token punctuation">,</span> <span class="token string">'EXTRA'</span><span class="token punctuation">,</span> <span class="token string">'COMMENT'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">table</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token variable">$rows</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 输出某个表所有字段     * @param $tableName     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getTableFields</span><span class="token punctuation">(</span><span class="token variable">$tableName</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTableColumns</span><span class="token punctuation">(</span><span class="token variable">$tableName</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$columns</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pluck</span><span class="token punctuation">(</span><span class="token string">'COLUMN_NAME'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$columns</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"'{$value}'"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$columns</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取数据库的表名     * @param $table     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getTableColumns</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = \'%s\' AND TABLE_NAME = \'%s\' '</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$columns</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'Not Found Table, got "%s".'</span><span class="token punctuation">,</span> <span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$columns</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取表注释     * @param $table     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getTableComment</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'SELECT TABLE_COMMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = \'%s\' AND TABLE_SCHEMA = \'%s\''</span><span class="token punctuation">,</span>            <span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$tableComment</span> <span class="token operator">=</span> <span class="token constant">DB</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$tableComment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$tableComment</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">TABLE_COMMENT</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_DATABASE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面是我封装的数据库表信息查询 sql 的文件。</p><h3 id="生成代码实现"><a href="#生成代码实现" class="headerlink" title="生成代码实现"></a>生成代码实现</h3><p>下面，我们来看看怎样使用<code>App\Traits\GeneratorTemplate</code> 文件夹下的 model 模板创建模型。</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** * 创建模型 * @param $name */</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultNamespace</span><span class="token punctuation">(</span><span class="token string">'Models'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$table</span> <span class="token operator">=</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">snake</span><span class="token punctuation">(</span>Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pluralStudly</span><span class="token punctuation">(</span><span class="token function">class_basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTableFields</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token string">"["</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$columns</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$column</span> <span class="token operator">=</span> <span class="token variable">$columns</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"'id'"</span><span class="token punctuation">,</span> <span class="token string">"'created_at'"</span><span class="token punctuation">,</span> <span class="token string">"'updated_at'"</span><span class="token punctuation">,</span> <span class="token string">"'status'"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$fields</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"%s,"</span><span class="token punctuation">,</span> <span class="token variable">$column</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$fields</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">",]"</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$modelTemplate</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">genModelTemplate</span><span class="token punctuation">(</span><span class="token variable">$namespace</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$namespace</span> <span class="token punctuation">.</span> <span class="token string">'\\'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'class %s exist'</span><span class="token punctuation">,</span> <span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">app_path</span><span class="token punctuation">(</span><span class="token string">"/Models/{$name}.php"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$modelTemplate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">' created model successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​</p><p>从代码可以看到，<code>model</code>方法需要一个 <code>name</code> 参数，它由我们在 artisan 命令里传入。<br>看看 <code>$modelTemplate</code> 属性。我们使用变量把<code>model</code>模板文件里的占位符替换为我们期望的值。</p><p>基本上，在<code>App\Traits\GeneratorTemplate</code>文件里，我们用<code>$name</code>替换了<code></code>。请记住，在我们的例子中，<code>$name</code>的值是 RoleMenu。</p><p>你可以打开<code>App\Traits\GeneratorTemplate</code>文件检查一下，所有的<code></code>都被替换为了 RoleMenu。</p><p><code>file_put_contents</code>函数再次使用了<code>$name</code>创建了一个新文件，因此它被命名为<code>RoleMenu.php</code>。并且，我们给这个文件传入内容，这些内容是从<code>$modelTemplate</code>属性获取的。<code>$modelTemplate</code>属性值是<code>App\Traits\GeneratorTemplate</code>文件的内容，只是所有的占位符均被替换了。</p><p>同样的事情还发生在<code>controller</code>和<code>validation</code>方法里。因此，我将这两个方法的内容粘贴在这里。</p><p><code>App\Console\Commands\ApiGenerator.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Console<span class="token punctuation">\</span>Commands</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Str</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Traits<span class="token punctuation">\</span>MysqlStructure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Console<span class="token punctuation">\</span>Command</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Traits<span class="token punctuation">\</span>GeneratorTemplate</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>Console<span class="token punctuation">\</span>Exception<span class="token punctuation">\</span>RuntimeException</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ApiGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">MysqlStructure</span><span class="token punctuation">,</span> GeneratorTemplate<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The name and signature of the console command.     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$signature</span> <span class="token operator">=</span> 'api<span class="token punctuation">:</span>generator    <span class="token punctuation">{</span>name <span class="token punctuation">:</span> <span class="token keyword">Class</span> <span class="token punctuation">(</span>singular<span class="token punctuation">)</span> <span class="token keyword">for</span> example User<span class="token punctuation">}</span>'<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The console command description.     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string">'Create Api operations'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string">'DB_DATABASE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the root namespace for the class.     * @return string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">rootNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">laravel</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the default namespace for the class.     * @param $name     * @return string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getDefaultNamespace</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">rootNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'\\'</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'\\'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$namespace</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取规则文件     * @param $type     * @return bool|string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">getStub</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">resource_path</span><span class="token punctuation">(</span><span class="token string">"stubs/$type.stub"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建规则文件     * @param $name     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">validation</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultNamespace</span><span class="token punctuation">(</span><span class="token string">'Http\Validations\Api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token operator">=</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">snake</span><span class="token punctuation">(</span>Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pluralStudly</span><span class="token punctuation">(</span><span class="token function">class_basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">tableFieldsReplaceModelFields</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rules</span> <span class="token operator">=</span> <span class="token string">"[\n"</span><span class="token punctuation">;</span>        <span class="token variable">$messgaes</span> <span class="token operator">=</span> <span class="token string">'[]'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$columns</span> <span class="token keyword">as</span> <span class="token variable">$column</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">COLUMN_NAME</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'created_at'</span><span class="token punctuation">,</span> <span class="token string">'updated_at'</span><span class="token punctuation">,</span> <span class="token string">'status'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$rule</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">IS_NULLABLE</span> <span class="token operator">==</span> <span class="token string">"YES"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$rule</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'required'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$rule</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'nullable'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">CHARACTER_MAXIMUM_LENGTH</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$rule</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'|max:'</span> <span class="token punctuation">.</span> <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">CHARACTER_MAXIMUM_LENGTH</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$rules</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"                '%s' => '%s',\n"</span><span class="token punctuation">,</span> <span class="token variable">$column</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">COLUMN_NAME</span><span class="token punctuation">,</span> <span class="token variable">$rule</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$rules</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"            ]"</span><span class="token punctuation">;</span>        <span class="token variable">$templateContent</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">genValidationTemplate</span><span class="token punctuation">(</span><span class="token variable">$namespace</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$rules</span><span class="token punctuation">,</span> <span class="token variable">$rules</span><span class="token punctuation">,</span> <span class="token variable">$messgaes</span><span class="token punctuation">,</span> <span class="token variable">$messgaes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$namespace</span> <span class="token punctuation">.</span> <span class="token string">'\\'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'class %s exist'</span><span class="token punctuation">,</span> <span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">app_path</span><span class="token punctuation">(</span><span class="token string">"/Http/Validations/Api/{$name}.php"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$templateContent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">' created validation successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建资源文件     * @param $name     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">resource</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultNamespace</span><span class="token punctuation">(</span><span class="token string">'Http\Resources'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$resourceTemplate</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">genResourceTemplate</span><span class="token punctuation">(</span><span class="token variable">$namespace</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$namespace</span> <span class="token punctuation">.</span> <span class="token string">'\\'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'class %s exist'</span><span class="token punctuation">,</span> <span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">app_path</span><span class="token punctuation">(</span><span class="token string">"/Http/Resources/{$name}Resource.php"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$resourceTemplate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">' created resource successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建控制器     * @param $name     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">controller</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultNamespace</span><span class="token punctuation">(</span><span class="token string">'Http\Controllers\Api'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$controllerTemplate</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">genControllerTemplate</span><span class="token punctuation">(</span><span class="token variable">$namespace</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">camel</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pluralStudly</span><span class="token punctuation">(</span>Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">camel</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$namespace</span> <span class="token punctuation">.</span> <span class="token string">'\\'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'class %s exist'</span><span class="token punctuation">,</span> <span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">app_path</span><span class="token punctuation">(</span><span class="token string">"/Http/Controllers/Api/{$name}Controller.php"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$controllerTemplate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">' created controller successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建模型     * @param $name     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">model</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$namespace</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDefaultNamespace</span><span class="token punctuation">(</span><span class="token string">'Models'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token operator">=</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">snake</span><span class="token punctuation">(</span>Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">pluralStudly</span><span class="token punctuation">(</span><span class="token function">class_basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$columns</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTableFields</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token string">"["</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$columns</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$column</span> <span class="token operator">=</span> <span class="token variable">$columns</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$column</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"'id'"</span><span class="token punctuation">,</span> <span class="token string">"'created_at'"</span><span class="token punctuation">,</span> <span class="token string">"'updated_at'"</span><span class="token punctuation">,</span> <span class="token string">"'status'"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$fields</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"%s,"</span><span class="token punctuation">,</span> <span class="token variable">$column</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$fields</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">"]"</span><span class="token punctuation">;</span>        <span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">",]"</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$modelTemplate</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">genModelTemplate</span><span class="token punctuation">(</span><span class="token variable">$namespace</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$fields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$class</span> <span class="token operator">=</span> <span class="token variable">$namespace</span> <span class="token punctuation">.</span> <span class="token string">'\\'</span> <span class="token punctuation">.</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'class %s exist'</span><span class="token punctuation">,</span> <span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">app_path</span><span class="token punctuation">(</span><span class="token string">"/Models/{$name}.php"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$modelTemplate</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token string">' created model successfully.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Execute the console command.     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$name</span> <span class="token operator">=</span> Str<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">argument</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validation</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">model</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此本篇文章完结。后续打开基于 <code>laravel</code> 和 <code>react</code> 开发一套全新的cms系统，到时候会将很多代码封装成 sdk</p><p>需要值得一提的是我生成的  <code>verification</code> 文件啥都没有，可以根据数据库的表字段类型生成验证规则，是不是节省了很多编码时间呢？ 哈哈哈哈<br><a href="https://learnku.com/laravel/t/3137/design-of-shared-verification-rule-layer" target="_blank" rel="noopener">verification文章参考</a><br><a href="https://learnku.com/laravel/t/12500/command-line-combat-hand-in-hand-to-create-a-laravel-crud-code-generator-for-you" target="_blank" rel="noopener">代码参考文章</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《数据结构与算法之美》为什么要学习数据结构和算法 (读后感)</title>
      <link href="/article/b026963d.html"/>
      <url>/article/b026963d.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、数据结构和算法是什么"><a href="#一、数据结构和算法是什么" class="headerlink" title="一、数据结构和算法是什么"></a>一、数据结构和算法是什么</h2><ol><li>数据结构是指一组数据的存储结构</li><li>算法就是操作数据的方法</li><li>数据结构和算法是相辅相成的，数据结构是为算法服务的，而算法要作用在特定的数据结构之上</li></ol><h2 id="二、学习的重点在什么地方"><a href="#二、学习的重点在什么地方" class="headerlink" title="二、学习的重点在什么地方"></a>二、学习的重点在什么地方</h2><p>数据结构和算法解决的是如何更省、更快地存储和处理数据的问题，因此，我们就需要一个考量效率和资源消耗的方法，这就是复杂度分析方法。在学习数据结构和算法的过程中，要学习它的「来历」、「自身的特点」、「适合解决的问题」以及「实际的应用场景」。</p><ol><li>数据结构和算法学习的精髓-复杂度分析</li><li>最常用的、最基础的数据结构：数组、链表、栈、队列、散列表、二叉树、堆、跳表、图、Trie 树</li><li>最常用的算法：递归、排序、二分查找、搜索、哈希算法、贪心算法、分治算法、回溯算法、动态规划、字符串匹配算法.</li></ol><h2 id="三、为什么要学习"><a href="#三、为什么要学习" class="headerlink" title="三、为什么要学习"></a>三、为什么要学习</h2><ol><li>作为一名程序员，我觉得这个是基本功，就好比建房子一样，地基一定要牢固</li><li>现在有如此多的开源项目，人们往往开发中只是照搬，调试，集成，然后很少会去注意性能和优化方面，慢慢的也就成了CRUD boy</li><li>算法提供的是一种思想，这个思想真的可以让你超神，让你对待问题有着独特的见解，我觉得这个才是最重要的。不再是原来的，没有思考</li><li>数据结构作为cs的基本专业，并且贯穿整个cs学习生涯，在cs方面的研究还是有很大的实用价值。<br>数据结构与算法的意义？</li><li>根据我个人多年的开发经验总结: 算法和数据结构其实就是代码和机器的交互,怎么才能写出机器执行效率<code>更快丶更省</code>的代码就是我们学习的主要目的.</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超详细 Hexo + Github Page 搭建技术blog教程</title>
      <link href="/article/d2b1ed72.html"/>
      <url>/article/d2b1ed72.html</url>
      
        <content type="html"><![CDATA[<h1 id="超详细-Hexo-Github-Page-搭建技术blog教程"><a href="#超详细-Hexo-Github-Page-搭建技术blog教程" class="headerlink" title="超详细 Hexo + Github Page 搭建技术blog教程"></a>超详细 Hexo + Github Page 搭建技术blog教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。</p><p>这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p><p>下面就开始吧~</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>准备 node 和 git 环境，<br>首先，安装 NodeJS，因为 Hexo 是基于 Node.js 驱动的一款博客框架，相比起前面提到过的 Jekyll 框架更快更简洁，因为天*朝网络被墙的原因尝试过安装 Jekyll 失败而放弃了。<br>然后，安装 git，一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。如果 Git 还不熟悉可以参考廖雪峰大神的 Git 教程。</p><p>两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windowns）或者终端（Mac），下方中将统一称为命令行。<br>在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> versionnode -v<span class="token function">npm</span> -v</code></pre><p><img src="https://imgkr.cn-bj.ufileos.com/a8f34ad7-050d-4a98-8317-1cd5f257df5c.png" alt="超详细 Hexo + Github Page 搭建技术blog教程"></p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a> 的详细文档。<br>在命令行输入执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class=" language-bash"><code class="language-bash">hexo init my-blog<span class="token function">cd</span> my-blog<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre class=" language-tree"><code class="language-tree">.├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 ├── package.json├── scaffolds # 模版文件夹├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹|   ├── _drafts # 草稿文件|   └── _posts # 文章Markdowm文件 └── themes  # 主题文件夹</code></pre><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 <code>hexo s</code> 命令，其中 <code>s</code> 是 <code>server</code> 的缩写，在浏览器中输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 回车就可以预览效果了。</p><pre class=" language-bash"><code class="language-bash">hexo s</code></pre><p>以下是我本地的预览效果，更换了 <a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a> 主题的，默认不是这个主题。</p><p><img src="https://imgkr.cn-bj.ufileos.com/1382a18c-2ef6-4a0d-adb7-bf8940bf83bc.png" alt="hexo-theme-matery"></p><p><img src="https://imgkr.cn-bj.ufileos.com/9e42cd4c-06ed-49bc-86e8-8708d00ac16a.png" alt="hexo-theme-matery"></p><p><img src="https://imgkr.cn-bj.ufileos.com/7f0efde2-8916-4f23-b40e-77703b5b0ddc.png" alt="hexo-theme-matery"></p><p><img src="https://imgkr.cn-bj.ufileos.com/aa310852-2aae-4aa2-9feb-b6a4e3d687bb.png" alt="hexo-theme-matery"></p><p>至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。</p><h2 id="创建-github-page"><a href="#创建-github-page" class="headerlink" title="创建 github page"></a>创建 github page</h2><ul><li>第一步创建<code>repository</code><br><img src="https://imgkr.cn-bj.ufileos.com/c4ba3fe9-ba06-4e17-a95b-c16260a2a9d7.png" alt="repository"></li></ul><ul><li>第二步输入你要申请的 github.io 域名<br><img src="https://imgkr.cn-bj.ufileos.com/39927eab-27df-46a4-a5dd-48ca08b9778a.png" alt="github.io"></li></ul><blockquote><p>注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。</p></blockquote><h2 id="第三步配置-github-page"><a href="#第三步配置-github-page" class="headerlink" title="第三步配置 github page"></a>第三步配置 github page</h2><p>在建好的仓库右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它，当然里面还很空什么东西都没有。 该地址就是你的博客默认地址，你也可以购买域名，将其换成你喜欢的地址。</p><p><img src="https://imgkr.cn-bj.ufileos.com/b3e27327-9839-4c2c-bc7f-ab55e3c2609a.png" alt="github page"></p><h2 id="生成-github-ssh"><a href="#生成-github-ssh" class="headerlink" title="生成 github ssh"></a>生成 github ssh</h2><p><a href="https://jeffreybool.github.io/2020/06/05/linux-fu-wu-qi-sheng-cheng-github-ssh/" target="_blank" rel="noopener">参考文章</a></p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。<br>首先，ssh key肯定要配置好。<br>其次，配置_config.yml中 有关deploy的部分：<br>正确写法：</p><pre class=" language-yml"><code class="language-yml">deploy:  type: git  repository: git@github.com:JeffreyBool/jeffreybool.github.io.git  branch: master</code></pre><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><pre class=" language-bash"><code class="language-bash">hexo new <span class="token string">"postName"</span> <span class="token comment" spellcheck="true">#新建文章</span>hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true">#新建页面</span>hexo generate <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>hexo server <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>hexo deploy <span class="token comment" spellcheck="true">#部署到GitHub</span>hexo <span class="token function">help</span>  <span class="token comment" spellcheck="true"># 查看帮助</span>hexo version  <span class="token comment" spellcheck="true">#查看Hexo的版本</span></code></pre><h4 id="缩写："><a href="#缩写：" class="headerlink" title="缩写："></a>缩写：</h4><pre class=" language-bash"><code class="language-bash">hexo n <span class="token operator">==</span><span class="token operator">></span> hexo newhexo g <span class="token operator">==</span><span class="token operator">></span> hexo generatehexo s <span class="token operator">==</span><span class="token operator">></span> hexo serverhexo d <span class="token operator">==</span><span class="token operator">></span> hexo deploy</code></pre><h4 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h4><pre class=" language-bash"><code class="language-bash">hexo s -g <span class="token comment" spellcheck="true"># 生成并本地预览</span>hexo d -g <span class="token comment" spellcheck="true"># 生成并上传</span></code></pre><h1 id="未完结，后续继续更新"><a href="#未完结，后续继续更新" class="headerlink" title="未完结，后续继续更新"></a>未完结，后续继续更新</h1><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://segmentfault.com/a/1190000017986794" target="_blank" rel="noopener">超详细Hexo+Github Page搭建技术博客教程【持续更新】</a><br><a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">使用hexo+github搭建免费个人博客详细教程</a><br><a href="https://www.jianshu.com/p/1bcad7700c46" target="_blank" rel="noopener">使用hexo搭建github博客</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跳表实现原理</title>
      <link href="/article/a7938bd1.html"/>
      <url>/article/a7938bd1.html</url>
      
        <content type="html"><![CDATA[<p>是一种动态的数据结构,它可以支持快速的插入、查找、查询操作.写起来并不复杂,甚至可以替代红黑树.</p><p>对于一个单链表来讲,即使链表中的储存数据是有序的.如果我们想要在其中查找某个数据,也只能从头到尾遍历链表.这样的效率会很低,时间复杂度也很高  <code>O(n)</code>.</p><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555264459_hwwzRqoAyX.png" alt="跳表实现原理"></p><blockquote><p>如何提升链表的查询效率呢? 我们对链表建立一级索引层.每两个节点提取一个节点到上一级.图中的 down 表示 down 指针，指向下一级结点。</p></blockquote><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555264467_VmnwgITZSJ.png" alt="跳表实现原理"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555264476_85UkzmWwjz.png" alt="跳表实现原理"></p><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555264488_ZCNI85qG89.png" alt="跳表实现原理"></p><blockquote><p>这种链表加多级索引的结构，就是<code>跳表</code></p></blockquote><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555264496_WX4kM3HP9K.png" alt="跳表实现原理"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h3><p>跳表采用空间换时间的设计思路,通过构建多级索引来提高查询的效率,实现了基于链表的<code>二分查找</code>.跳表是一种动态的数据结构,支持快速的插入.</p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/4">https://www.zhanggaoyuan.com/article/4</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析Redis常用数据类型对应的数据结构</title>
      <link href="/article/f3d7d619.html"/>
      <url>/article/f3d7d619.html</url>
      
        <content type="html"><![CDATA[<p>Redis是一种key-value非关系型数据库</p><h2 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 <code>list</code></h2><p>这种数据类型是由两种方法实现的,一种是压缩列表<code>ziplist</code> , 另一种是<code>双向循环链表</code>.</p><p>当数据量小的时候,列表就可以使用<code>压缩列表</code>的方式实现,具体需要同时满足下面两个条件:</p><ul><li>列表保存的单个数据小于64个字节.</li><li>列表数据个数少于512个.</li></ul><blockquote><p>关于压缩列表它并不是基础的数据结构,而是 Redis 自己设计的数据储存结构.它类似数据,是一片连续的内存空间来存储数据.有点类似数组,它跟数组不同的一点是,它允许数据的大小不一样.</p></blockquote><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555259749_mjpgRq6IsS.png" alt="剖析Redis常用数据类型对应的数据结构"></p><blockquote><p>为什么叫压缩列表? 最直接的反应就是节省内存,相当于数组的储存思路而言,我们知道数组要求每个元素大小相同,如果我们储存的是不同长度的字符串.那么就会使用最大长度的字符串大小作为元素的大小(例如假设是20个字节).当我们储存小于20个字节的时候,就会浪费部分空间.</p></blockquote><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/201904/15/1_1555259770_19FMp6Qc2s.png" alt="剖析Redis常用数据类型对应的数据结构"></p><blockquote><p>压缩列表这种数据结构,一方面可以比较节省内存,另一方面还可以支持不同类型的数据存储.因为在一片连续的内存空间所以读取数据的效率也非常高.</p><blockquote><p>双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。一般我们都构造双向循环链表。</p></blockquote></blockquote><h2 id="字典-hash"><a href="#字典-hash" class="headerlink" title="字典 hash"></a>字典 <code>hash</code></h2><p>字典这种数据类型用于储存一组数据对,每个数据对又包含又包含键值两部分.字典也是由两种方式实现的,一种是<code>压缩列表</code>,另外一种是<code>散列表</code>.</p><p>只有在数据量储存小的时候会使用压缩列表,同时需要满足下面两种条件:</p><ul><li>字典中保存的键和值大小都要小于64个字节.</li><li>字典中键和值的个数要少于512个.</li></ul><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 <code>set</code></h2><p>集合用于储存一组不重复的数据,这种数据类型也有两种方法.一种是基于<code>有序数组</code>,另一种是基于<code>散列表</code>.</p><p>当储存的数据满足下面两种条件的时候,Redis 就使用 <code>有序数组</code> 来实现集合这种数据类型.</p><ul><li>储存的数据都是整数</li><li>储存的元素个数不要超过512个.</li></ul><h2 id="有序集合-sortedset"><a href="#有序集合-sortedset" class="headerlink" title="有序集合 sortedset"></a>有序集合 <code>sortedset</code></h2><p>有序集合用来储存一组数据,并且每个数据都会附带一个得分 <code>score</code>. 通过<code>score</code>的大小,我们将数据组织成<code>跳表</code>这样的数据结构.以快速按照得分或者区间获取数据.</p><p>当数据量小的时候会<code>压缩列表</code>来实现有序集合.需要同时满足下面两种情况.</p><ul><li>所有数据的大小都要小于64个字节.</li><li>元素的个数要少于128个.</li></ul><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/1">https://www.zhanggaoyuan.com/article/1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 laravel auth 接口实现自定义接口API用户认证详细步骤</title>
      <link href="/article/e8066d9a.html"/>
      <url>/article/e8066d9a.html</url>
      
        <content type="html"><![CDATA[<h2 id="基于-laravel-默认的-auth-实现-api-认证"><a href="#基于-laravel-默认的-auth-实现-api-认证" class="headerlink" title="基于 laravel 默认的 auth 实现 api 认证"></a>基于 laravel 默认的 <code>auth</code> 实现 api 认证</h2><p>现在微服务越来越流行了. 很多东西都拆分成独立的系统,各个系统之间没有直接的关系. 这样我们如果做用户认证肯定是统一的做一个独立的 <code>用户认证</code> 系统,而不是每个业务系统都要重新去写一遍用户认证相关的东西. 但是又遇到一个问题了. <code>laravel</code> 默认的<code>auth  认证</code> 是基于数据库做的,如果要微服务架构可怎么做呢?</p><h2 id="实现代码如下"><a href="#实现代码如下" class="headerlink" title="实现代码如下:"></a>实现代码如下:</h2><h3 id="UserProvider-接口"><a href="#UserProvider-接口" class="headerlink" title="UserProvider 接口:"></a>UserProvider 接口:</h3><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 通过唯一标示符获取认证模型</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveById</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过唯一标示符和 remember token 获取模型</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByToken</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过给定的认证模型更新 remember token</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateRememberToken</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过给定的凭证获取用户，比如 email 或用户名等等</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 认证给定的用户和给定的凭证是否符合</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validateCredentials</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>Laravel</code> 中默认有两个 <strong>user provider</strong> : <code>DatabaseUserProvider</code> &amp; <code>EloquentUserProvider</code>.<br><strong>DatabaseUserProvider</strong><br><code>Illuminate\Auth\DatabaseUserProvider</code></p><p>直接通过数据库表来获取认证模型.</p><p><strong>EloquentUserProvider</strong><br><code>Illuminate\Auth\EloquentUserProvider</code></p><p>通过 eloquent 模型来获取认证模型</p><hr><p>根据上面的知识，可以知道要自定义一个认证很简单。</p><h2 id="自定义-Provider"><a href="#自定义-Provider" class="headerlink" title="自定义 Provider"></a>自定义 <code>Provider</code></h2><p>创建一个自定义的认证模型，实现 Authenticatable 接口；</p><p><code>App\Auth\UserProvider.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Models<span class="token punctuation">\</span>User</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Authenticatable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>UserProvider</span> <span class="token keyword">as</span> Provider<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UserProvider</span> <span class="token keyword">implements</span> <span class="token class-name">Provider</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Retrieve a user by their unique identifier.     * @param  mixed $identifier     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveById</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span>User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getUserByGuId</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieve a user by their unique identifier and "remember me" token.     * @param  mixed  $identifier     * @param  string $token     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByToken</span><span class="token punctuation">(</span><span class="token variable">$identifier</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Update the "remember me" token for the given user in storage.     * @param  \Illuminate\Contracts\Auth\Authenticatable $user     * @param  string                                     $token     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateRememberToken</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Retrieve a user by the given credentials.     * @param  array $credentials     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token string">'api_token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span>User<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getUserByToken</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token string">'api_token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Rules a user against the given credentials.     * @param  \Illuminate\Contracts\Auth\Authenticatable $user     * @param  array                                      $credentials     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validateCredentials</span><span class="token punctuation">(</span>Authenticatable <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token string">'api_token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Authenticatable-接口"><a href="#Authenticatable-接口" class="headerlink" title="Authenticatable 接口:"></a>Authenticatable 接口:</h3><p><code>Illuminate\Contracts\Auth\Authenticatable</code><br>Authenticatable 定义了一个可以被用来认证的模型或类需要实现的接口，也就是说，如果需要用一个自定义的类来做认证，需要实现这个接口定义的方法。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// 获取唯一标识的，可以用来认证的字段名，比如 id，uuid</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthIdentifierName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取该标示符对应的值</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取认证的密码</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取remember token</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置 remember token</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setRememberToken</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取 remember token 对应的字段名，比如默认的 'remember_token'</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberTokenName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>Laravel 中定义的 <code>Authenticatable trait</code>，也是 Laravel auth 默认的 <code>User</code> 模型使用的 trait，这个 trait 定义了 <code>User</code> 模型默认认证标示符为 ‘id’，密码字段为<code>password</code>，<code>remember token</code> 对应的字段为 <code>remember_token</code> 等等。<br>​<br>通过重写 <code>User</code> 模型的这些方法可以修改一些设置。</p><h3 id="实现自定义认证模型"><a href="#实现自定义认证模型" class="headerlink" title="实现自定义认证模型"></a>实现自定义认证模型</h3><p><code>App\Models\User.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Models</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Exceptions<span class="token punctuation">\</span>RestApiException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Models<span class="token punctuation">\</span>Abstracts<span class="token punctuation">\</span>RestApiModel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Authenticatable</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">RestApiModel</span> <span class="token keyword">implements</span> <span class="token class-name">Authenticatable</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token string">'guid'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$incrementing</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$keyType</span> <span class="token operator">=</span> <span class="token string">'string'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取唯一标识的，可以用来认证的字段名，比如 id，guid     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthIdentifierName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">primaryKey</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取主键的值     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getAuthIdentifierName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getAuthPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setRememberToken</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getRememberTokenName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getBaseUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token string">'api-host.user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$apiMap</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'getUserByToken'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'method'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'path'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'login/user/token'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'getUserByGuId'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'method'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'path'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'user/guid/:guid'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取用户信息 (by guid)     * @param string $guid     * @return User|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getUserByGuId</span><span class="token punctuation">(</span>string <span class="token variable">$guid</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token variable">$response</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'getUserByGuId'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">':guid'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$guid</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RestApiException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取用户信息 (by token)     * @param string $token     * @return User|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">getUserByToken</span><span class="token punctuation">(</span>string <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token variable">$response</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'getUserByToken'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>                <span class="token string">'Authorization'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$token</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RestApiException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$response</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面 <code>RestApiModel</code> 是我们公司对 <code>Guzzle</code> 的封装,用于 php 项目各个系统之间 <code>api</code> 调用. 代码就不方便透漏了.</p><h2 id="Guard-接口"><a href="#Guard-接口" class="headerlink" title="Guard 接口"></a>Guard 接口</h2><p><code>Illuminate\Contracts\Auth\Guard</code></p><p><code>Guard</code> 接口定义了某个实现了 <code>Authenticatable</code> (可认证的) 模型或类的认证方法以及一些常用的接口。</p><pre><code>// 判断当前用户是否登录public function check();// 判断当前用户是否是游客（未登录）public function guest();// 获取当前认证的用户public function user();// 获取当前认证用户的 id，严格来说不一定是 id，应该是上个模型中定义的唯一的字段名public function id();// 根据提供的消息认证用户public function validate(array $credentials = []);// 设置当前用户public function setUser(Authenticatable $user);</code></pre><h3 id="StatefulGuard-接口"><a href="#StatefulGuard-接口" class="headerlink" title="StatefulGuard 接口"></a>StatefulGuard 接口</h3><p><code>Illuminate\Contracts\Auth\StatefulGuard</code></p><p><code>StatefulGuard</code> 接口继承自 <code>Guard</code> 接口，除了 <code>Guard</code> 里面定义的一些基本接口外，还增加了更进一步、有状态的 <code>Guard</code>.</p><p>新添加的接口有这些：</p><pre><code>// 尝试根据提供的凭证验证用户是否合法public function attempt(array $credentials = [], $remember = false);// 一次性登录，不记录session or cookiepublic function once(array $credentials = []);// 登录用户，通常在验证成功后记录 session 和 cookie public function login(Authenticatable $user, $remember = false);// 使用用户 id 登录public function loginUsingId($id, $remember = false);// 使用用户 ID 登录，但是不记录 session 和 cookiepublic function onceUsingId($id);// 通过 cookie 中的 remember token 自动登录public function viaRemember();// 登出public function logout();</code></pre><p><code>Laravel</code> 中默认提供了 3 中 <strong>guard</strong> ：<code>RequestGuard</code>，<code>TokenGuard</code>，<code>SessionGuard</code>.</p><h3 id="RequestGuard"><a href="#RequestGuard" class="headerlink" title="RequestGuard"></a>RequestGuard</h3><p><code>Illuminate\Auth\RequestGuard</code></p><p>RequestGuard 是一个非常简单的 guard. RequestGuard 是通过传入一个闭包来认证的。可以通过调用 <code>Auth::viaRequest</code> 添加一个自定义的 RequestGuard.</p><h3 id="SessionGuard"><a href="#SessionGuard" class="headerlink" title="SessionGuard"></a>SessionGuard</h3><p><code>Illuminate\Auth\SessionGuard</code></p><p>SessionGuard 是 Laravel web 认证默认的 guard.</p><h3 id="TokenGuard"><a href="#TokenGuard" class="headerlink" title="TokenGuard"></a>TokenGuard</h3><p><code>Illuminate\Auth\TokenGuard</code></p><p>TokenGuard 适用于无状态 api 认证，通过 token 认证.</p><h2 id="实现自定义-Guard"><a href="#实现自定义-Guard" class="headerlink" title="实现自定义 Guard"></a>实现自定义 <code>Guard</code></h2><p><code>App\Auth\UserGuard.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Auth</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>GuardHelpers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>Guard</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>UserProvider</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">UserGuard</span> <span class="token keyword">implements</span> <span class="token class-name">Guard</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">GuardHelpers</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$request</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$provider</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The name of the query string item from the request containing the API token.     *     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$inputKey</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The name of the token "column" in persistent storage.     *     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$storageKey</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The user we last attempted to retrieve     * @var     */</span>    <span class="token keyword">protected</span> <span class="token variable">$lastAttempted</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * UserGuard constructor.     * @param UserProvider $provider     * @param Request      $request     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span>UserProvider <span class="token variable">$provider</span><span class="token punctuation">,</span> Request <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">request</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">provider</span> <span class="token operator">=</span> <span class="token variable">$provider</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">inputKey</span> <span class="token operator">=</span> <span class="token string">'Authorization'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">storageKey</span> <span class="token operator">=</span> <span class="token string">'api_token'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the currently authenticated user.     * @return \Illuminate\Contracts\Auth\Authenticatable|null     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTokenForRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">provider</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span>                <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">storageKey</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$token</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Rules a user's credentials.     * @param  array $credentials     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$credentials</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">inputKey</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$credentials</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">storageKey</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$credentials</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">inputKey</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">lastAttempted</span> <span class="token operator">=</span> <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">provider</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">retrieveByCredentials</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">hasValidCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Determine if the user matches the credentials.     * @param  mixed $user     * @param  array $credentials     * @return bool     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">hasValidCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">provider</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">validateCredentials</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$credentials</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the token for the current request.     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getTokenForRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">request</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">header</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">inputKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Set the current request instance.     *     * @param  \Illuminate\Http\Request  $request     * @return $this     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setRequest</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">request</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在 AppServiceProvider 的 boot 方法添加如下代码：<br><code>App\Providers\AuthServiceProvider.php</code></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">// auth:api -> token provider.</span>Auth<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">provider</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span>UserProvider<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// auth:api -> token guard.</span><span class="token comment" spellcheck="true">// @throw \Exception</span>Auth<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$app</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token keyword">array</span> <span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">===</span> <span class="token string">'api'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">make</span><span class="token punctuation">(</span>UserGuard<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>            <span class="token string">'provider'</span> <span class="token operator">=</span><span class="token operator">></span> Auth<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">createUserProvider</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'provider'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'request'</span>  <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$app</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">request</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string">'This guard only serves "auth:api".'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><ul><li><p>在 <code>config\auth.php</code>的 guards 数组中添加自定义 <code>guard</code>，一个自定义 guard 包括两部分： <code>driver</code> 和 <code>provider</code>.</p></li><li><p>设置 <code>config\auth.php</code> 的 defaults.guard 为 <code>api</code>.</p></li></ul><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">/*    |--------------------------------------------------------------------------    | Authentication Defaults    |--------------------------------------------------------------------------    |    | This option controls the default authentication "guard" and password    | reset options for your application. You may change these defaults    | as required, but they're a perfect start for most applications.    |    */</span>    <span class="token string">'defaults'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'guard'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'api'</span><span class="token punctuation">,</span>        <span class="token string">'passwords'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'users'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*    |--------------------------------------------------------------------------    | Authentication Guards    |--------------------------------------------------------------------------    |    | Next, you may define every authentication guard for your application.    | Of course, a great default configuration has been defined for you    | here which uses session storage and the Eloquent user provider.    |    | All authentication drivers have a user provider. This defines how the    | users are actually retrieved out of your database or other storage    | mechanisms used by this application to persist your user's data.    |    | Supported: "session", "token"    |    */</span>    <span class="token string">'guards'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'web'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'session'</span><span class="token punctuation">,</span>            <span class="token string">'provider'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'users'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'api'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'token'</span><span class="token punctuation">,</span>            <span class="token string">'provider'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'token'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*    |--------------------------------------------------------------------------    | User Providers    |--------------------------------------------------------------------------    |    | All authentication drivers have a user provider. This defines how the    | users are actually retrieved out of your database or other storage    | mechanisms used by this application to persist your user's data.    |    | If you have multiple user tables or models you may configure multiple    | sources which represent each model / table. These sources may then    | be assigned to any extra authentication guards you have defined.    |    | Supported: "database", "eloquent"    |    */</span>    <span class="token string">'providers'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'users'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'eloquent'</span><span class="token punctuation">,</span>            <span class="token string">'model'</span> <span class="token operator">=</span><span class="token operator">></span> App\<span class="token package">Models<span class="token punctuation">\</span>User</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'token'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'token'</span><span class="token punctuation">,</span>            <span class="token string">'model'</span> <span class="token operator">=</span><span class="token operator">></span> App\<span class="token package">Models<span class="token punctuation">\</span>User</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/*    |--------------------------------------------------------------------------    | Resetting Passwords    |--------------------------------------------------------------------------    |    | You may specify multiple password reset configurations if you have more    | than one user table or model in the application and you want to have    | separate password reset settings based on the specific user types.    |    | The expire time is the number of minutes that the reset token should be    | considered valid. This security feature keeps tokens short-lived so    | they have less time to be guessed. You may change this as needed.    |    */</span>    <span class="token string">'passwords'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>        <span class="token string">'users'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>            <span class="token string">'provider'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'users'</span><span class="token punctuation">,</span>            <span class="token string">'table'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'password_resets'</span><span class="token punctuation">,</span>            <span class="token string">'expire'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">60</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>原文<a href="https://www.zhanggaoyuan.com/topics/143/realization-of-user-interface-authentication-for-user-interface-api-based-on-laravel-auth">地址</a><br>参考文章: <a href="https://learnku.com/articles/3825/laravel-authentication-principle-and-full-custom-authentication" target="_blank" rel="noopener">地址</a></p><p>第一次写这么多字的文章,写的不好请多多包涵!! </p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/9">https://www.zhanggaoyuan.com/article/9</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
            <tag> auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uber Go 语言编码规范中文版</title>
      <link href="/article/4a54ccfa.html"/>
      <url>/article/4a54ccfa.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h2><p>英文原文标题是 <a href="https://github.com/uber-go/guide" target="_blank" rel="noopener"><strong>Uber Go Style Guide</strong></a>，这里的 Style 是指在编码时遵从的一些约定。</p><p>这篇编程指南的初衷是更好的管理我们的代码，包括去编写什么样的代码，以及不要编写什么样的代码。我们希望通过这份编程指南，代码可以具有更好的维护性，同时能够让我们的开发同学更高效地编写 Go 语言代码。</p><p>这份编程指南最初由 <a href="https://github.com/prashantv" target="_blank" rel="noopener">Prashant Varanasi</a> 和 <a href="https://github.com/nomis52" target="_blank" rel="noopener">Simon Newton</a> 编写，旨在让其他同事快速地熟悉和编写 Go 程序。经过多年发展，现在的版本经过了多番修改和改进了。这是我们在 Uber 遵从的编程范式，但是很多都是可以通用的，如下是其他可以参考的链接：</p><ul><li><a href="https://learnku.com/docs/effective-go" target="_blank" rel="noopener">Effective Go</a></li><li><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="noopener">The Go common mistakes guide</a></li></ul><p>所有的提交代码都应该通过 <code>golint</code> 和 <code>go vet</code> 检测，建议在代码编辑器上面做如下设置：</p><ul><li>保存的时候运行 <code>goimports</code></li><li>使用 <code>golint</code> 和 <code>go vet</code> 去做错误检测。</li></ul><p>你可以通过下面链接发现更多的 Go 编辑器的插件: <a href="https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins" target="_blank" rel="noopener">https://github.com/golang/go/wiki/IDEsAndTextEditorPlugins</a></p><h2 id="编程指南"><a href="#编程指南" class="headerlink" title="编程指南"></a><strong>编程指南</strong></h2><h3 id="指向-Interface-的指针"><a href="#指向-Interface-的指针" class="headerlink" title="指向 Interface 的指针"></a>指向 Interface 的指针</h3><p>在我们日常使用中，基本上不会需要使用指向 interface 的指针。当我们将 interface 作为值传递的时候，底层数据就是指针。Interface 包括两方面：</p><ul><li>一个包含 type 信息的指针</li><li>一个指向数据的指针</li></ul><p>如果你想要修改底层的数据，那么你只能使用 pointer。</p><h3 id="接收器-receiver-与接口"><a href="#接收器-receiver-与接口" class="headerlink" title="接收器 (receiver) 与接口"></a>接收器 (receiver) 与接口</h3><p>使用值接收器的方法既可以通过值调用，也可以通过指针调用。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> S <span class="token keyword">struct</span> <span class="token punctuation">{</span>  data <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s S<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>S<span class="token punctuation">)</span> <span class="token function">Write</span><span class="token punctuation">(</span>str <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  s<span class="token punctuation">.</span>data <span class="token operator">=</span> str<span class="token punctuation">}</span>sVals <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span>S<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 你只能通过值调用 Read</span>sVals<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 这不能编译通过：</span><span class="token comment" spellcheck="true">//  sVals[1].Write("test")</span>sPtrs <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token operator">*</span>S<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过指针既可以调用 Read，也可以调用 Write 方法</span>sPtrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span><span class="token punctuation">)</span>sPtrs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span></code></pre><p>同样，即使该方法具有值接收器，也可以通过指针来满足接口。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> F <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> S1 <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s S1<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">type</span> S2 <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>S2<span class="token punctuation">)</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>s1Val <span class="token operator">:=</span> S1<span class="token punctuation">{</span><span class="token punctuation">}</span>s1Ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>S1<span class="token punctuation">{</span><span class="token punctuation">}</span>s2Val <span class="token operator">:=</span> S2<span class="token punctuation">{</span><span class="token punctuation">}</span>s2Ptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>S2<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> i Fi <span class="token operator">=</span> s1Vali <span class="token operator">=</span> s1Ptri <span class="token operator">=</span> s2Ptr<span class="token comment" spellcheck="true">//  下面代码无法通过编译。因为 s2Val 是一个值，而 S2 的 f 方法中没有使用值接收器</span><span class="token comment" spellcheck="true">//   i = s2Val</span></code></pre><p>Effective Go 中有一段关于 <a href="https://learnku.com/docs/effective-go/method/6245#20ffd5" target="_blank" rel="noopener">pointers vs. values</a> 的精彩讲解。</p><h3 id="零值-Mutex-是有效的"><a href="#零值-Mutex-是有效的" class="headerlink" title="零值 Mutex 是有效的"></a>零值 Mutex 是有效的</h3><p>零值 <code>sync.Mutex</code> 和 <code>sync.RWMutex</code> 是有效的。所以指向 mutex 的指针基本是不必要的。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">mu <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutexmu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>如果你使用结构体（struct）指针，mutex 可以非指针形式作为结构体的组成字段，或者更好的方式是直接嵌入到结构体中。 如果是私有结构体类型或是要实现 Mutex 接口的类型，我们可以使用嵌入 mutex 的方法：</p><p>为私有类型或需要实现互斥接口的类型嵌入：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> smap <span class="token keyword">struct</span> <span class="token punctuation">{</span>  sync<span class="token punctuation">.</span>Mutex <span class="token comment" spellcheck="true">// 仅适用于非导出类型</span>  data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newSMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>smap <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>smap<span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>smap<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>k <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  m<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> m<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>对于导出的类型，请使用专用字段：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> SMap <span class="token keyword">struct</span> <span class="token punctuation">{</span>  mu sync<span class="token punctuation">.</span>Mutex  data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewSMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>SMap <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>SMap<span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>SMap<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>k <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> m<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> m<span class="token punctuation">.</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="在边界处拷贝-Slices-和-Maps"><a href="#在边界处拷贝-Slices-和-Maps" class="headerlink" title="在边界处拷贝 Slices 和 Maps"></a>在边界处拷贝 Slices 和 Maps</h3><p>slices 和 maps 包含了指向底层数据的指针，因此在需要复制它们时要特别注意。</p><h4 id="接收-Slices-和-Maps"><a href="#接收-Slices-和-Maps" class="headerlink" title="接收 Slices 和 Maps"></a>接收 Slices 和 Maps</h4><p>请记住，当 map 或 slice 作为函数参数传入时，如果您存储了对它们的引用，则用户可以对其进行修改。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Driver<span class="token punctuation">)</span> <span class="token function">SetTrips</span><span class="token punctuation">(</span>trips <span class="token punctuation">[</span><span class="token punctuation">]</span>Trip<span class="token punctuation">)</span> <span class="token punctuation">{</span>  d<span class="token punctuation">.</span>trips <span class="token operator">=</span> trips<span class="token punctuation">}</span>trips <span class="token operator">:=</span> <span class="token operator">...</span>d1<span class="token punctuation">.</span><span class="token function">SetTrips</span><span class="token punctuation">(</span>trips<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Did you mean to modify d1.trips?</span>trips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">...</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>Driver<span class="token punctuation">)</span> <span class="token function">SetTrips</span><span class="token punctuation">(</span>trips <span class="token punctuation">[</span><span class="token punctuation">]</span>Trip<span class="token punctuation">)</span> <span class="token punctuation">{</span>  d<span class="token punctuation">.</span>trips <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>Trip<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>trips<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">copy</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>trips<span class="token punctuation">,</span> trips<span class="token punctuation">)</span><span class="token punctuation">}</span>trips <span class="token operator">:=</span> <span class="token operator">...</span>d1<span class="token punctuation">.</span><span class="token function">SetTrips</span><span class="token punctuation">(</span>trips<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// We can now modify trips[0] without affecting d1.trips.</span>trips<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">...</span></code></pre><h4 id="slice-和-map-作为返回值"><a href="#slice-和-map-作为返回值" class="headerlink" title="slice 和 map 作为返回值"></a>slice 和 map 作为返回值</h4><p>同样，请注意用户对暴露内部状态的 map 或 slice 的修改。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Stats <span class="token keyword">struct</span> <span class="token punctuation">{</span>  sync<span class="token punctuation">.</span>Mutex  counters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Snapshot 返回当前状态。</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stats<span class="token punctuation">)</span> <span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>  s<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span>counters<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// snapshot is no longer protected by the lock!</span>snapshot <span class="token operator">:=</span> stats<span class="token punctuation">.</span><span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Stats <span class="token keyword">struct</span> <span class="token punctuation">{</span>  sync<span class="token punctuation">.</span>Mutex  counters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>Stats<span class="token punctuation">)</span> <span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>  s<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">defer</span> s<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>counters<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> s<span class="token punctuation">.</span>counters <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// snapshot 现在是一个拷贝</span>snapshot <span class="token operator">:=</span> stats<span class="token punctuation">.</span><span class="token function">Snapshot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="使用-defer-做资源清理"><a href="#使用-defer-做资源清理" class="headerlink" title="使用 defer 做资源清理"></a>使用 defer 做资源清理</h3><p>使用 defer 释放资源，诸如文件和锁。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">p<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>  p<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> p<span class="token punctuation">.</span>count<span class="token punctuation">}</span>p<span class="token punctuation">.</span>count<span class="token operator">++</span>newCount <span class="token operator">:=</span> p<span class="token punctuation">.</span>countp<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> newCount<span class="token comment" spellcheck="true">// 当有多个 return 分支时，很容易遗忘 unlock</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">p<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> p<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> p<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> p<span class="token punctuation">.</span>count<span class="token punctuation">}</span>p<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token keyword">return</span> p<span class="token punctuation">.</span>count<span class="token comment" spellcheck="true">// 可读性越佳</span></code></pre><p>尽管使用 defer 会导致一定的性能开销，但是大部分情况下这个开销在你的整个链路上所占的比重往往是微乎其微，除非说真的是有非常高的性能需求。另外使用 defer 从可读性改进以及代码错误减少上来看，都是值得的。</p><h3 id="channel-的-size-最好是-1-或者是-unbuffered"><a href="#channel-的-size-最好是-1-或者是-unbuffered" class="headerlink" title="channel 的 size 最好是 1 或者是 unbuffered"></a>channel 的 size 最好是 1 或者是 unbuffered</h3><p>在使用 channel 的时候，最好将 size 设置为 1 或者使用 unbuffered channel。其他 size 的 channel 往往都会引入更多的复杂度，需要更多考虑上下游的设计。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 应该足以满足任何情况！</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 大小：1</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 或者</span><span class="token comment" spellcheck="true">// 无缓冲 channel，大小为 0</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span></code></pre><h3 id="枚举变量应该从-1-开始"><a href="#枚举变量应该从-1-开始" class="headerlink" title="枚举变量应该从 1 开始"></a>枚举变量应该从 1 开始</h3><p>在 Go 语言中枚举值的声明典型方式是通过 <code>const</code> 和 <code>iota</code> 来声明。由于 0 是默认值，所以枚举值最好从一个非 0 值开始，比如 1。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Operation <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  Add Operation <span class="token operator">=</span> <span class="token boolean">iota</span>  Subtract  Multiply<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Add=0, Subtract=1, Multiply=2</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Operation <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  Add Operation <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>  Subtract  Multiply<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Add=1, Subtract=2, Multiply=3</span></code></pre><p>有一种例外情况：0 值是预期的默认行为的时候，枚举值可以从 0 开始。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> LogOutput <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  LogToStdout LogOutput <span class="token operator">=</span> <span class="token boolean">iota</span>  LogToFile  LogToRemote<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// LogToStdout=0, LogToFile=1, LogToRemote=2</span></code></pre><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><p>Go 中有多种声明错误（Error) 的选项：</p><ul><li><a href="https://golang.org/pkg/errors/#New" target="_blank" rel="noopener"><code>errors.New</code></a> 对于简单静态字符串的错误</li><li><a href="https://golang.org/pkg/fmt/#Errorf" target="_blank" rel="noopener"><code>fmt.Errorf</code></a> 用于格式化的错误字符串</li><li>实现 <code>Error()</code> 方法的自定义类型</li><li>用 <a href="https://godoc.org/github.com/pkg/errors#Wrap" target="_blank" rel="noopener"><code>"pkg/errors".Wrap</code></a> 的 Wrapped errors</li></ul><p>返回错误时，请考虑以下因素以确定最佳选择：</p><ul><li>这是一个不需要额外信息的简单错误吗？如果是这样，<a href="https://golang.org/pkg/errors/#New" target="_blank" rel="noopener"><code>errors.New</code></a> 足够了。</li><li>客户需要检测并处理此错误吗？如果是这样，则应使用自定义类型并实现该 <code>Error()</code> 方法。</li><li>您是否正在传播下游函数返回的错误？如果是这样，请查看本文后面有关错误包装 <a href="https://github.com/xxjwxc/uber_go_guide_cn#%E9%94%99%E8%AF%AF%E5%8C%85%E8%A3%85" target="_blank" rel="noopener" title="Error-Wrapping">section on error wrapping</a> 部分的内容。</li><li>否则 <a href="https://golang.org/pkg/fmt/#Errorf" target="_blank" rel="noopener"><code>fmt.Errorf</code></a> 就可以了。</li></ul><p>如果客户端需要检测错误，并且您已使用创建了一个简单的错误 <a href="https://golang.org/pkg/errors/#New" target="_blank" rel="noopener"><code>errors.New</code></a>，请使用一个错误变量。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// package foo</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"could not open"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// package bar</span><span class="token keyword">func</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> foo<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"could not open"</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// handle</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unknown error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// package foo</span><span class="token keyword">var</span> ErrCouldNotOpen <span class="token operator">=</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"could not open"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> ErrCouldNotOpen<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// package bar</span><span class="token keyword">if</span> err <span class="token operator">:=</span> foo<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> err <span class="token operator">==</span> foo<span class="token punctuation">.</span>ErrCouldNotOpen <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// handle</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unknown error"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果您有可能需要客户端检测的错误，并且想向其中添加更多信息（例如，它不是静态字符串），则应使用自定义类型。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">open</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"file %q not found"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"not found"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// handle</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unknown error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> errNotFound <span class="token keyword">struct</span> <span class="token punctuation">{</span>  file <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e errNotFound<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"file %q not found"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">open</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> errNotFound<span class="token punctuation">{</span>file<span class="token punctuation">:</span> file<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>errNotFound<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// handle</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unknown error"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>直接导出自定义错误类型时要小心，因为它们已成为程序包公共 API 的一部分。最好公开匹配器功能以检查错误。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// package foo</span><span class="token keyword">type</span> errNotFound <span class="token keyword">struct</span> <span class="token punctuation">{</span>  file <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e errNotFound<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"file %q not found"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">IsNotFoundError</span><span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>errNotFound<span class="token punctuation">)</span>  <span class="token keyword">return</span> ok<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>file <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> errNotFound<span class="token punctuation">{</span>file<span class="token punctuation">:</span> file<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// package bar</span><span class="token keyword">if</span> err <span class="token operator">:=</span> foo<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> foo<span class="token punctuation">.</span><span class="token function">IsNotFoundError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// handle</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"unknown error"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="错误包装-Error-Wrapping"><a href="#错误包装-Error-Wrapping" class="headerlink" title="错误包装 (Error Wrapping)"></a>错误包装 (Error Wrapping)</h3><p>一个（函数/方法）调用失败时，有三种主要的错误传播方式：</p><ul><li><p>如果没有要添加的其他上下文，并且您想要维护原始错误类型，则返回原始错误。</p></li><li><p>添加上下文，使用 <a href="https://godoc.org/github.com/pkg/errors#Wrap" target="_blank" rel="noopener"><code>"pkg/errors".Wrap</code></a> 以便错误消息提供更多上下文 ,<a href="https://godoc.org/github.com/pkg/errors#Cause" target="_blank" rel="noopener"><code>"pkg/errors".Cause</code></a> 可用于提取原始错误。 Use fmt.Errorf if the callers do not need to detect or handle that specific error case.</p></li><li><p>如果调用者不需要检测或处理的特定错误情况，使用 <a href="https://golang.org/pkg/fmt/#Errorf" target="_blank" rel="noopener"><code>fmt.Errorf</code></a>。</p></li></ul><p>建议在可能的地方添加上下文，以使您获得诸如“调用服务 foo：连接被拒绝”之类的更有用的错误，而不是诸如“连接被拒绝”之类的模糊错误。</p><p>在将上下文添加到返回的错误时，请避免使用“failed to”之类的短语来保持上下文简洁，这些短语会陈述明显的内容，并随着错误在堆栈中的渗透而逐渐堆积：</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">s<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>        <span class="token string">"failed to create new store: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">s<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span>        <span class="token string">"new store: %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>但是，一旦将错误发送到另一个系统，就应该明确消息是错误消息（例如使用<code>err</code>标记，或在日志中以”Failed”为前缀）。</p><p>另请参见 <a href="https://dave.cheney.net/2016/04/27/dont-just-check-errors-handle-them-gracefully" target="_blank" rel="noopener">Don’t just check errors, handle them gracefully</a>. 不要只是检查错误，要优雅地处理错误。</p><h3 id="类型转换失败处理"><a href="#类型转换失败处理" class="headerlink" title="类型转换失败处理"></a>类型转换失败处理</h3><p>类型转换失败会导致进程 panic，所以对于类型转换，一定要使用 <code>!ok</code> 的范式来处理。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">t <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">t<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 优雅地处理错误</span><span class="token punctuation">}</span></code></pre><h3 id="不要-panic"><a href="#不要-panic" class="headerlink" title="不要 panic"></a>不要 panic</h3><p>在生产环境中运行的代码必须避免出现 panic。panic 是 <a href="https://en.wikipedia.org/wiki/Cascading_failure" target="_blank" rel="noopener">cascading failures</a> 级联失败的主要根源 。如果发生错误，该函数必须返回错误，并允许调用方决定如何处理它。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>bar <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"bar must not be empty"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"USAGE: foo &lt;bar>"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">foo</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>bar <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>    <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"bar must not be empty"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"USAGE: foo &lt;bar>"</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Panic/Recover 并不是一种 error 处理策略。仅当发生不可恢复的事情（例如：nil 引用）时，程序才必须 panic。程序初始化是一个例外：程序启动时应使程序中止的不良情况可能会引起 panic。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> _statusTemplate <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"_statusHTML"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>即使在测试代码中，也优先使用<code>t.Fatal</code>或者<code>t.FailNow</code>而不是 panic 来确保失败被标记。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// func TestFoo(t *testing.T)</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">TempFile</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"failed to set up test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// func TestFoo(t *testing.T)</span>f<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">TempFile</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  t<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"failed to set up test"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="使用-http-go-uber-org-atomic"><a href="#使用-http-go-uber-org-atomic" class="headerlink" title="使用 http://go.uber.org/atomic"></a>使用 <a href="http://go.uber.org/atomic" target="_blank" rel="noopener">http://go.uber.org/atomic</a></h3><p>使用 <a href="https://golang.org/pkg/sync/atomic/" target="_blank" rel="noopener">sync/atomic</a> 包的原子操作对原始类型 (<code>int32</code>, <code>int64</code>等）进行操作，因为很容易忘记使用原子操作来读取或修改变量。</p><p><a href="https://godoc.org/go.uber.org/atomic" target="_blank" rel="noopener">go.uber.org/atomic</a> 通过隐藏基础类型为这些操作增加了类型安全性。此外，它包括一个方便的<code>atomic.Bool</code>类型。</p><p>这个是 Uber 内部对原生包 <code>sync/atomic</code> 的一种封装，隐藏了底层数据类型。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>  running <span class="token builtin">int32</span>  <span class="token comment" spellcheck="true">// atomic</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f<span class="token operator">*</span> foo<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> atomic<span class="token punctuation">.</span><span class="token function">SwapInt32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>f<span class="token punctuation">.</span>running<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// already running…</span>     <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// start the Foo</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>foo<span class="token punctuation">)</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> f<span class="token punctuation">.</span>running <span class="token operator">==</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">// race!</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>  running atomic<span class="token punctuation">.</span>Bool<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>foo<span class="token punctuation">)</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> f<span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">Swap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// already running…</span>     <span class="token keyword">return</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// start the Foo</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>f <span class="token operator">*</span>foo<span class="token punctuation">)</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> f<span class="token punctuation">.</span>running<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="避免可变全局变量"><a href="#避免可变全局变量" class="headerlink" title="避免可变全局变量"></a>避免可变全局变量</h3><p>使用选择依赖注入方式避免改变全局变量。 既适用于函数指针又适用于其他值类型。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// sign.go</span><span class="token keyword">var</span> _timeNow <span class="token operator">=</span> time<span class="token punctuation">.</span>Now<span class="token keyword">func</span> <span class="token function">sign</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  now <span class="token operator">:=</span> <span class="token function">_timeNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">signWithTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// sign.go</span><span class="token keyword">type</span> signer <span class="token keyword">struct</span> <span class="token punctuation">{</span>  now <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>signer <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&amp;</span>signer<span class="token punctuation">{</span>    now<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Now<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>signer<span class="token punctuation">)</span> <span class="token function">Sign</span><span class="token punctuation">(</span>msg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  now <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">signWithTime</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="性能相关"><a href="#性能相关" class="headerlink" title="性能相关"></a><strong>性能相关</strong></h2><p>性能方面的特定准则只适用于高频场景。</p><h3 id="类型转换时，使用-strconv-替换-fmt"><a href="#类型转换时，使用-strconv-替换-fmt" class="headerlink" title="类型转换时，使用 strconv 替换 fmt"></a>类型转换时，使用 strconv 替换 fmt</h3><p>当基本类型和 string 互转的时候，<code>strconv</code> 要比 <code>fmt</code> 快。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>  s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BenchmarkFmtSprint-4    143 ns/op    2 allocs/op</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>  s <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BenchmarkStrconv-4    64.2 ns/op    1 allocs/op</span></code></pre><h3 id="避免字符串到字节的转换"><a href="#避免字符串到字节的转换" class="headerlink" title="避免字符串到字节的转换"></a>避免字符串到字节的转换</h3><p>不要反复从固定字符串创建字节 slice。相反，请执行一次转换并捕获结果。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>  w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BenchmarkBad-4   50000000   22.2 ns/op</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>  w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BenchmarkGood-4  500000000   3.25 ns/op</span></code></pre><h3 id="尽量初始化时指定-Map-容量"><a href="#尽量初始化时指定-Map-容量" class="headerlink" title="尽量初始化时指定 Map 容量"></a>尽量初始化时指定 Map 容量</h3><p>在尽可能的情况下，在使用 <code>make()</code> 初始化的时候提供容量信息</p><pre class=" language-source-go"><code class="language-source-go">make(map[T1]T2, hint)</code></pre><p>为 <code>make()</code> 提供容量信息（hint）尝试在初始化时调整 map 大小， 这减少了在将元素添加到 map 时增长和分配的开销。 注意，map 不能保证分配 hint 个容量。因此，即使提供了容量，添加元素仍然可以进行分配。</p><p><strong>Bad</strong></p><p><code>m</code> 是在没有大小提示的情况下创建的； 在运行时可能会有更多分配。</p><pre class=" language-go"><code class="language-go">m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">)</span>files<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span><span class="token string">"./files"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">{</span>    m<span class="token punctuation">[</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><p><code>m</code> 是有大小提示创建的；在运行时可能会有更少的分配。</p><pre class=" language-go"><code class="language-go">files<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span><span class="token string">"./files"</span><span class="token punctuation">)</span>m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>os<span class="token punctuation">.</span>FileInfo<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> f <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">{</span>    m<span class="token punctuation">[</span>f<span class="token punctuation">.</span><span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">}</span></code></pre><h2 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a><strong>编程风格</strong></h2><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>本文中概述的一些标准都是客观性的评估，是根据场景、上下文、或者主观性的判断；</p><p>但是最重要的是，<strong>保持一致</strong>.</p><p>一致性的代码更容易维护、是更合理的、需要更少的学习成本、并且随着新的约定出现或者出现错误后更容易迁移、更新、修复 bug</p><p>相反，一个单一的代码库会导致维护成本开销、不确定性和认知偏差。所有这些都会直接导致速度降低、 代码审查痛苦、而且增加 bug 数量</p><p>将这些标准应用于代码库时，建议在 package（或更大）级别进行更改，子包级别的应用程序通过将多个样式引入到同一代码中，违反了上述关注点。</p><h3 id="相似的声明放在一组"><a href="#相似的声明放在一组" class="headerlink" title="相似的声明放在一组"></a>相似的声明放在一组</h3><p>Go 语言支持将相似的声明放在一个组内。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"a"</span><span class="token keyword">import</span> <span class="token string">"b"</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"a"</span>  <span class="token string">"b"</span><span class="token punctuation">)</span></code></pre><p>这同样适用于常量、变量和类型声明：</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">type</span> Area <span class="token builtin">float64</span><span class="token keyword">type</span> Volume <span class="token builtin">float64</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>  a <span class="token operator">=</span> <span class="token number">1</span>  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>  a <span class="token operator">=</span> <span class="token number">1</span>  b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">type</span> <span class="token punctuation">(</span>  Area <span class="token builtin">float64</span>  Volume <span class="token builtin">float64</span><span class="token punctuation">)</span></code></pre><p>仅将相关的声明放在一组。不要将不相关的声明放在一组。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Operation <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  Add Operation <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>  Subtract  Multiply  ENV_VAR <span class="token operator">=</span> <span class="token string">"MY_ENV"</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Operation <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  Add Operation <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>  Subtract  Multiply<span class="token punctuation">)</span><span class="token keyword">const</span> ENV_VAR <span class="token operator">=</span> <span class="token string">"MY_ENV"</span></code></pre><p>分组使用的位置没有限制，例如：你可以在函数内部使用它们：</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> red <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> green <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x00ff00</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> blue <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x0000ff</span><span class="token punctuation">)</span>  <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> <span class="token punctuation">(</span>    red   <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0xff0000</span><span class="token punctuation">)</span>    green <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x00ff00</span><span class="token punctuation">)</span>    blue  <span class="token operator">=</span> color<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token number">0x0000ff</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span>  <span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="import-分组"><a href="#import-分组" class="headerlink" title="import 分组"></a>import 分组</h3><p>导入应该分为两组：</p><ul><li>标准库</li><li>其他库</li></ul><p>默认情况下，这是 goimports 应用的分组。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span>  <span class="token string">"go.uber.org/atomic"</span>  <span class="token string">"golang.org/x/sync/errgroup"</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span>  <span class="token string">"go.uber.org/atomic"</span>  <span class="token string">"golang.org/x/sync/errgroup"</span><span class="token punctuation">)</span></code></pre><h3 id="包名"><a href="#包名" class="headerlink" title="包名"></a>包名</h3><p>当命名包时，请按下面规则选择一个名称：</p><ul><li>全部小写。没有大写或下划线。</li><li>大多数使用命名导入的情况下，不需要重命名。</li><li>简短而简洁。请记住，在每个使用的地方都完整标识了该名称。</li><li>不用复数。例如<code>net/url</code>，而不是<code>net/urls</code>。</li><li>不要用“common”，“util”，“shared”或“lib”。这些是不好的，信息量不足的名称。</li></ul><p>另请参阅 <a href="https://blog.golang.org/package-names" target="_blank" rel="noopener">Package Names</a> 和 <a href="https://rakyll.org/style-packages/" target="_blank" rel="noopener">Go 包样式指南</a>.</p><h3 id="函数名"><a href="#函数名" class="headerlink" title="函数名"></a>函数名</h3><p>我们遵循 Go 社区关于使用 <a href="https://learnku.com/docs/effective-go/naming-rules/6239#5b02ab" target="_blank" rel="noopener">MixedCaps 作为函数名</a> 的约定。有一个例外，为了对相关的测试用例进行分组，函数名可能包含下划线，如：<code>TestMyFunction_WhatIsBeingTested</code>。</p><h3 id="导入别名"><a href="#导入别名" class="headerlink" title="导入别名"></a>导入别名</h3><p>如果程序包名称与导入路径的最后一个元素不匹配，则必须使用导入别名。</p><pre class=" language-source-go"><code class="language-source-go">import (  "net/http"  client "example.com/client-go"  trace "example.com/trace/v2")</code></pre><p>在所有其他情况下，除非导入之间有直接冲突，否则应避免导入别名。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span>  nettrace <span class="token string">"golang.net/x/trace"</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>  <span class="token string">"fmt"</span>  <span class="token string">"os"</span>  <span class="token string">"runtime/trace"</span>  nettrace <span class="token string">"golang.net/x/trace"</span><span class="token punctuation">)</span></code></pre><h3 id="函数分组与顺序"><a href="#函数分组与顺序" class="headerlink" title="函数分组与顺序"></a>函数分组与顺序</h3><ul><li>函数应按粗略的调用顺序排序。</li><li>同一文件中的函数应按接收者分组。</li></ul><p>因此，导出的函数应先出现在文件中，放在<code>struct</code>, <code>const</code>, <code>var</code>定义的后面。</p><p>在定义类型之后，但在接收者的其余方法之前，可能会出现一个 <code>newXYZ()</code>/<code>NewXYZ()</code></p><p>由于函数是按接收者分组的，因此普通工具函数应在文件末尾出现。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>weights<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> something <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>something <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>something<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> something <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">newSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>something <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>something<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Cost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>weights<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>something<span class="token punctuation">)</span> <span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">calcCost</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span></code></pre><h3 id="减少嵌套"><a href="#减少嵌套" class="headerlink" title="减少嵌套"></a>减少嵌套</h3><p>代码应通过尽可能先处理错误情况/特殊情况并尽早返回或继续循环来减少嵌套。减少嵌套多个级别的代码的代码量。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>  <span class="token keyword">if</span> v<span class="token punctuation">.</span>F1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>    v <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>      v<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> err    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Invalid v: %v"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> data <span class="token punctuation">{</span>  <span class="token keyword">if</span> v<span class="token punctuation">.</span>F1 <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Invalid v: %v"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">continue</span>  <span class="token punctuation">}</span>  v <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err  <span class="token punctuation">}</span>  v<span class="token punctuation">.</span><span class="token function">Send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="不必要的-else"><a href="#不必要的-else" class="headerlink" title="不必要的 else"></a>不必要的 else</h3><p>如果在 if 的两个分支中都设置了变量，则可以将其替换为单个 if。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> a <span class="token builtin">int</span><span class="token keyword">if</span> b <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">a <span class="token operator">:=</span> <span class="token number">10</span><span class="token keyword">if</span> b <span class="token punctuation">{</span>  a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">}</span></code></pre><h3 id="顶层变量声明"><a href="#顶层变量声明" class="headerlink" title="顶层变量声明"></a>顶层变量声明</h3><p>在顶层，使用标准<code>var</code>关键字。请勿指定类型，除非它与表达式的类型不同。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> _s <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"A"</span> <span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> _s <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 由于 F 已经明确了返回一个字符串类型，因此我们没有必要显式指定_s 的类型</span><span class="token comment" spellcheck="true">// 还是那种类型</span><span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"A"</span> <span class="token punctuation">}</span></code></pre><p>如果表达式的类型与所需的类型不完全匹配，请指定类型。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> myError <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>myError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"error"</span> <span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> myError <span class="token punctuation">{</span> <span class="token keyword">return</span> myError<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">var</span> _e <span class="token builtin">error</span> <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// F 返回一个 myError 类型的实例，但是我们要 error 类型</span></code></pre><h3 id="对于未导出的顶层常量和变量，使用-作为前缀"><a href="#对于未导出的顶层常量和变量，使用-作为前缀" class="headerlink" title="对于未导出的顶层常量和变量，使用_作为前缀"></a>对于未导出的顶层常量和变量，使用_作为前缀</h3><p>在未导出的顶级<code>vars</code>和<code>consts</code>， 前面加上前缀_，以使它们在使用时明确表示它们是全局符号。</p><p>例外：未导出的错误值，应以<code>err</code>开头。</p><p>基本依据：顶级变量和常量具有包范围作用域。使用通用名称可能很容易在其他文件中意外使用错误的值。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// foo.go</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  defaultPort <span class="token operator">=</span> <span class="token number">8080</span>  defaultUser <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// bar.go</span><span class="token keyword">func</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  defaultPort <span class="token operator">:=</span> <span class="token number">9090</span>  <span class="token operator">...</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Default port"</span><span class="token punctuation">,</span> defaultPort<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// We will not see a compile error if the first line of</span>  <span class="token comment" spellcheck="true">// Bar() is deleted.</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// foo.go</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  _defaultPort <span class="token operator">=</span> <span class="token number">8080</span>  _defaultUser <span class="token operator">=</span> <span class="token string">"user"</span><span class="token punctuation">)</span></code></pre><h3 id="结构体中的嵌入"><a href="#结构体中的嵌入" class="headerlink" title="结构体中的嵌入"></a>结构体中的嵌入</h3><p>嵌入式类型（例如 mutex）应位于结构体内的字段列表的顶部，并且必须有一个空行将嵌入式字段与常规字段分隔开。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>  version <span class="token builtin">int</span>  http<span class="token punctuation">.</span>Client<span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Client <span class="token keyword">struct</span> <span class="token punctuation">{</span>  http<span class="token punctuation">.</span>Client  version <span class="token builtin">int</span><span class="token punctuation">}</span></code></pre><h3 id="使用字段名初始化结构体"><a href="#使用字段名初始化结构体" class="headerlink" title="使用字段名初始化结构体"></a>使用字段名初始化结构体</h3><p>初始化结构体时，几乎始终应该指定字段名称。现在由 <a href="https://golang.org/cmd/vet/" target="_blank" rel="noopener"><code>go vet</code></a> 强制执行。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">k <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token string">"John"</span><span class="token punctuation">,</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">k <span class="token operator">:=</span> User<span class="token punctuation">{</span>    FirstName<span class="token punctuation">:</span> <span class="token string">"John"</span><span class="token punctuation">,</span>    LastName<span class="token punctuation">:</span> <span class="token string">"Doe"</span><span class="token punctuation">,</span>    Admin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>例外：如果有 3 个或更少的字段，则可以在测试表中省略字段名称。</p><pre class=" language-source-go"><code class="language-source-go">tests := []struct{  op Operation  want string}{  {Add, "add"},  {Subtract, "subtract"},}</code></pre><h3 id="本地变量声明"><a href="#本地变量声明" class="headerlink" title="本地变量声明"></a>本地变量声明</h3><p>如果将变量明确设置为某个值，则应使用短变量声明形式 (<code>:=</code>)。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"foo"</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">"foo"</span></code></pre><p>但是，在某些情况下，var 使用关键字时默认值会更清晰。例如，声明空切片。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  filtered <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>    <span class="token keyword">if</span> v <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">{</span>      filtered <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>filtered<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span>list <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> filtered <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> list <span class="token punctuation">{</span>    <span class="token keyword">if</span> v <span class="token operator">></span> <span class="token number">10</span> <span class="token punctuation">{</span>      filtered <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>filtered<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="nil-是一个有效的-slice"><a href="#nil-是一个有效的-slice" class="headerlink" title="nil 是一个有效的 slice"></a>nil 是一个有效的 slice</h3><p><code>nil</code> 是一个有效的长度为 0 的 slice，这意味着，</p><ul><li>您不应明确返回长度为零的切片。应该返回<code>nil</code> 来代替。</li></ul><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><ul><li>要检查切片是否为空，请始终使用<code>len(s) == 0</code>。而非 <code>nil</code>。</li></ul><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> s <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">}</span></code></pre><ul><li>零值切片（用<code>var</code>声明的切片）可立即使用，无需调用<code>make()</code>创建。</li></ul><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">nums <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// or, nums := make([]int)</span><span class="token keyword">if</span> add1 <span class="token punctuation">{</span>  nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> add2 <span class="token punctuation">{</span>  nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">if</span> add1 <span class="token punctuation">{</span>  nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> add2 <span class="token punctuation">{</span>  nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="小变量作用域"><a href="#小变量作用域" class="headerlink" title="小变量作用域"></a>小变量作用域</h3><p>如果有可能，尽量缩小变量作用范围。除非它与减少嵌套的规则冲突。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><p>如果需要在 if 之外使用函数调用的结果，则不应尝试缩小范围。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  err <span class="token operator">=</span> cfg<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> err  <span class="token punctuation">}</span>  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">data<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> cfg<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> err<span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span></code></pre><h3 id="避免参数语义不明确-Avoid-Naked-Parameters"><a href="#避免参数语义不明确-Avoid-Naked-Parameters" class="headerlink" title="避免参数语义不明确(Avoid Naked Parameters)"></a>避免参数语义不明确(Avoid Naked Parameters)</h3><p>函数调用中的<code>意义不明确的参数</code>可能会损害可读性。当参数名称的含义不明显时，请为参数添加 C 样式注释 (<code>/* ... */</code>)</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// func printInfo(name string, isLocal, done bool)</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// func printInfo(name string, isLocal, done bool)</span><span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* isLocal */</span><span class="token punctuation">,</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">/* done */</span><span class="token punctuation">)</span></code></pre><p>对于上面的示例代码，还有一种更好的处理方式是将上面的 <code>bool</code> 类型换成自定义类型。将来，该参数可以支持不仅仅局限于两个状态（true/false）。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Region <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  UnknownRegion Region <span class="token operator">=</span> <span class="token boolean">iota</span>  Local<span class="token punctuation">)</span><span class="token keyword">type</span> Status <span class="token builtin">int</span><span class="token keyword">const</span> <span class="token punctuation">(</span>  StatusReady <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>  StatusDone  <span class="token comment" spellcheck="true">// Maybe we will have a StatusInProgress in the future.</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">printInfo</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> region Region<span class="token punctuation">,</span> status Status<span class="token punctuation">)</span></code></pre><h3 id="使用原始字符串字面值，避免转义"><a href="#使用原始字符串字面值，避免转义" class="headerlink" title="使用原始字符串字面值，避免转义"></a>使用原始字符串字面值，避免转义</h3><p>Go 支持使用 <a href="https://golang.org/ref/spec#raw_string_lit" target="_blank" rel="noopener">原始字符串字面值</a>，也就是 <code>`</code> 来表示原生字符串，在需要转义的场景下，我们应该尽量使用这种方案来替换。</p><p>可以跨越多行并包含引号。使用这些字符串可以避免更难阅读的手工转义的字符串。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">wantError <span class="token operator">:=</span> <span class="token string">"unknown name:.test."</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">wantError <span class="token operator">:=</span> <span class="token string">`unknown error:"test"`</span></code></pre><h3 id="初始化-Struct-引用"><a href="#初始化-Struct-引用" class="headerlink" title="初始化 Struct 引用"></a>初始化 Struct 引用</h3><p>在初始化结构引用时，请使用<code>&amp;T{}</code>代替<code>new(T)</code>，以使其与结构体初始化一致。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">sval <span class="token operator">:=</span> T<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// inconsistent</span>sptr <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span>sptr<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"bar"</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go">sval <span class="token operator">:=</span> T<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">}</span>sptr <span class="token operator">:=</span> <span class="token operator">&amp;</span>T<span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"bar"</span><span class="token punctuation">}</span></code></pre><h3 id="初始化-Maps"><a href="#初始化-Maps" class="headerlink" title="初始化 Maps"></a>初始化 Maps</h3><p>对于空 map 请使用 <code>make(..)</code> 初始化， 并且 map 是通过编程方式填充的。 这使得 map 初始化在表现上不同于声明，并且它还可以方便地在 make 后添加大小提示。</p><p><strong>Bad</strong></p><p>声明和初始化看起来非常相似的。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// m1 读写安全;</span>  <span class="token comment" spellcheck="true">// m2 在写入时会 panic</span>  m1 <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">{</span><span class="token punctuation">}</span>  m2 <span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><p>声明和初始化看起来差别非常大。 </p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// m1 读写安全;</span>  <span class="token comment" spellcheck="true">// m2 在写入时会 panic</span>  m1 <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">)</span>  m2 <span class="token keyword">map</span><span class="token punctuation">[</span>T1<span class="token punctuation">]</span>T2<span class="token punctuation">)</span></code></pre><h3 id="字符串-string-format"><a href="#字符串-string-format" class="headerlink" title="字符串 string format"></a>字符串 string format</h3><p>如果你为<code>Printf</code>-style 函数声明格式字符串，请将格式化字符串放在外面，并将其设置为<code>const</code>常量。</p><p>这有助于<code>go vet</code>对格式字符串执行静态分析。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go">msg <span class="token operator">:=</span> <span class="token string">"unexpected values %v, %v."</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">"unexpected values %v, %v."</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><h3 id="命名-Printf-样式的函数"><a href="#命名-Printf-样式的函数" class="headerlink" title="命名 Printf 样式的函数"></a>命名 Printf 样式的函数</h3><p>声明<code>Printf</code>-style 函数时，请确保<code>go vet</code>可以检测到它并检查格式字符串。</p><p>这意味着您应尽可能使用预定义的<code>Printf</code>-style 函数名称。<code>go vet</code>将默认检查这些。有关更多信息，请参见 <a href="https://golang.org/cmd/vet/#hdr-Printf_family" target="_blank" rel="noopener">Printf 系列</a>。</p><p>如果不能使用预定义的名称，请以 f 结束选择的名称：<code>Wrapf</code>，而不是<code>Wrap</code>。<code>go vet</code>可以要求检查特定的 Printf 样式名称，但名称必须以<code>f</code>结尾。</p><pre class=" language-go"><code class="language-go">$ <span class="token keyword">go</span> vet <span class="token operator">-</span>printfuncs<span class="token operator">=</span>wrapf<span class="token punctuation">,</span>statusf</code></pre><p>更多参考: <a href="https://kuzminva.wordpress.com/2017/11/07/go-vet-printf-family-check/" target="_blank" rel="noopener">go vet: Printf family check</a>.</p><h2 id="编程模式（Patterns）"><a href="#编程模式（Patterns）" class="headerlink" title="编程模式（Patterns）"></a><strong>编程模式（Patterns）</strong></h2><h3 id="表驱动测试"><a href="#表驱动测试" class="headerlink" title="表驱动测试"></a>表驱动测试</h3><p>当测试逻辑是重复的时候，通过 <a href="https://blog.golang.org/subtests" target="_blank" rel="noopener">subtests</a> 使用 table 驱动的方式编写 case 代码看上去会更简洁。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// func TestSplitHostPort(t *testing.T)</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span><span class="token string">"192.0.2.0:8000"</span><span class="token punctuation">)</span>require<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"192.0.2.0"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> err <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span><span class="token string">"192.0.2.0:http"</span><span class="token punctuation">)</span>require<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"192.0.2.0"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"http"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> err <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">)</span>require<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"8000"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> err <span class="token operator">=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span><span class="token string">"1:8"</span><span class="token punctuation">)</span>require<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> host<span class="token punctuation">)</span>assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"8"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// func TestSplitHostPort(t *testing.T)</span>tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span>  give     <span class="token builtin">string</span>  wantHost <span class="token builtin">string</span>  wantPort <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token punctuation">{</span>    give<span class="token punctuation">:</span>     <span class="token string">"192.0.2.0:8000"</span><span class="token punctuation">,</span>    wantHost<span class="token punctuation">:</span> <span class="token string">"192.0.2.0"</span><span class="token punctuation">,</span>    wantPort<span class="token punctuation">:</span> <span class="token string">"8000"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    give<span class="token punctuation">:</span>     <span class="token string">"192.0.2.0:http"</span><span class="token punctuation">,</span>    wantHost<span class="token punctuation">:</span> <span class="token string">"192.0.2.0"</span><span class="token punctuation">,</span>    wantPort<span class="token punctuation">:</span> <span class="token string">"http"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    give<span class="token punctuation">:</span>     <span class="token string">":8000"</span><span class="token punctuation">,</span>    wantHost<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    wantPort<span class="token punctuation">:</span> <span class="token string">"8000"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    give<span class="token punctuation">:</span>     <span class="token string">"1:8"</span><span class="token punctuation">,</span>    wantHost<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    wantPort<span class="token punctuation">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>  t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>give<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">SplitHostPort</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span>give<span class="token punctuation">)</span>    require<span class="token punctuation">.</span><span class="token function">NoError</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> err<span class="token punctuation">)</span>    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>wantHost<span class="token punctuation">,</span> host<span class="token punctuation">)</span>    assert<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> tt<span class="token punctuation">.</span>wantPort<span class="token punctuation">,</span> port<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>很明显，使用 test table 的方式在代码逻辑扩展的时候，比如新增 test case，都会显得更加的清晰。</p><p>我们遵循这样的约定：将结构体切片称为<code>tests</code>。 每个测试用例称为<code>tt</code>。此外，我们鼓励使用<code>give</code>和<code>want</code>前缀说明每个测试用例的输入和输出值。</p><pre class=" language-go"><code class="language-go">tests <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">struct</span><span class="token punctuation">{</span>  give     <span class="token builtin">string</span>  wantHost <span class="token builtin">string</span>  wantPort <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tt <span class="token operator">:=</span> <span class="token keyword">range</span> tests <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><h3 id="功能选项"><a href="#功能选项" class="headerlink" title="功能选项"></a>功能选项</h3><p>功能选项是一种模式，您可以在其中声明一个不透明 Option 类型，该类型在某些内部结构中记录信息。您接受这些选项的可变编号，并根据内部结构上的选项记录的全部信息采取行动。</p><p>将此模式用于您需要扩展的构造函数和其他公共 API 中的可选参数，尤其是在这些功能上已经具有三个或更多参数的情况下。</p><p><strong>Bad</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// package db</span><span class="token keyword">func</span> <span class="token function">Connect</span><span class="token punctuation">(</span>  addr <span class="token builtin">string</span><span class="token punctuation">,</span>  timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span>  caching <span class="token builtin">bool</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Connection<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>必须始终提供缓存和记录器参数，即使用户希望使用默认值。</p><pre class=" language-go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> db<span class="token punctuation">.</span>DefaultTimeout<span class="token punctuation">,</span> db<span class="token punctuation">.</span>DefaultCaching<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> newTimeout<span class="token punctuation">,</span> db<span class="token punctuation">.</span>DefaultCaching<span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> db<span class="token punctuation">.</span>DefaultTimeout<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* caching */</span><span class="token punctuation">)</span>db<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> newTimeout<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">/* caching */</span><span class="token punctuation">)</span></code></pre><p><strong>Good</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// package db</span><span class="token keyword">type</span> Option <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">WithCache</span><span class="token punctuation">(</span>c <span class="token builtin">bool</span><span class="token punctuation">)</span> Option <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">WithLogger</span><span class="token punctuation">(</span>log <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> Option <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Open creates a connection.</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>  addr <span class="token builtin">string</span><span class="token punctuation">,</span>  opts <span class="token operator">...</span>Option<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Connection<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>只有在需要时才提供选项。</p><pre class=" language-source-go"><code class="language-source-go">db.Open(addr)db.Open(addr, db.WithLogger(log))db.Open(addr, db.WithCache(false))db.Open(  addr,  db.WithCache(false),  db.WithLogger(log),)</code></pre><p>我们建议实现此模式的方法是使用一个 <code>Option</code> 接口，该接口保存一个未导出的方法，在一个未导出的 <code>options</code> 结构上记录选项。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> options <span class="token keyword">struct</span> <span class="token punctuation">{</span>  cache  <span class="token builtin">bool</span>  logger <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">}</span><span class="token keyword">type</span> Option <span class="token keyword">interface</span> <span class="token punctuation">{</span>  <span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">*</span>options<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> cacheOption <span class="token builtin">bool</span><span class="token keyword">func</span> <span class="token punctuation">(</span>c cacheOption<span class="token punctuation">)</span> <span class="token function">apply</span><span class="token punctuation">(</span>opts <span class="token operator">*</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  opts<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token function">bool</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">WithCache</span><span class="token punctuation">(</span>c <span class="token builtin">bool</span><span class="token punctuation">)</span> Option <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">cacheOption</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> loggerOption <span class="token keyword">struct</span> <span class="token punctuation">{</span>  Log <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>l loggerOption<span class="token punctuation">)</span> <span class="token function">apply</span><span class="token punctuation">(</span>opts <span class="token operator">*</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  opts<span class="token punctuation">.</span>Logger <span class="token operator">=</span> l<span class="token punctuation">.</span>Log<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">WithLogger</span><span class="token punctuation">(</span>log <span class="token operator">*</span>zap<span class="token punctuation">.</span>Logger<span class="token punctuation">)</span> Option <span class="token punctuation">{</span>  <span class="token keyword">return</span> loggerOption<span class="token punctuation">{</span>Log<span class="token punctuation">:</span> log<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Open creates a connection.</span><span class="token keyword">func</span> <span class="token function">Open</span><span class="token punctuation">(</span>  addr <span class="token builtin">string</span><span class="token punctuation">,</span>  opts <span class="token operator">...</span>Option<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Connection<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  options <span class="token operator">:=</span> options<span class="token punctuation">{</span>    cache<span class="token punctuation">:</span>  defaultCache<span class="token punctuation">,</span>    logger<span class="token punctuation">:</span> zap<span class="token punctuation">.</span><span class="token function">NewNop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> o <span class="token operator">:=</span> <span class="token keyword">range</span> opts <span class="token punctuation">{</span>    o<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>options<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span></code></pre><p>注意: 还有一种使用闭包实现这个模式的方法，但是我们相信上面的模式为作者提供了更多的灵活性，并且更容易对用户进行调试和测试。特别是，在不可能进行比较的情况下它允许在测试和模拟中对选项进行比较。此外，它还允许选项实现其他接口，包括 <code>fmt.Stringer</code>，允许用户读取选项的字符串表示形式。</p><p>还可以参考下面资料：</p><ul><li><a href="https://commandcenter.blogspot.com/2014/01/self-referential-functions-and-design.html" target="_blank" rel="noopener">Self-referential functions and the design of options</a></li><li><a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis" target="_blank" rel="noopener">Functional options for friendly APIs</a></li></ul><h2 id="译者注"><a href="#译者注" class="headerlink" title="译者注"></a><strong>译者注</strong></h2><blockquote><p>Uber 开源的这个文档给我印象最深的就是：保持代码简洁，并具有良好可读性。不得不说，相比于国内很多『代码能跑就完事了』这种写代码的态度，这篇文章或许可以给我们更多的启示和参考。</p></blockquote><p>译文参考：</p><ul><li><a href="https://github.com/xxjwxc/uber_go_guide_cn" target="_blank" rel="noopener">https://github.com/xxjwxc/uber_go_guide_cn</a></li><li><a href="https://zhuanlan.zhihu.com/p/86410535" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/86410535</a></li></ul><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/48">https://www.zhanggaoyuan.com/article/48</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统搭建golang环境</title>
      <link href="/article/fdc92cde.html"/>
      <url>/article/fdc92cde.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一步打开-golang-官方找到安装版本列表"><a href="#第一步打开-golang-官方找到安装版本列表" class="headerlink" title="第一步打开 golang 官方找到安装版本列表"></a>第一步打开 <code>golang</code> 官方找到安装版本列表</h2><blockquote><p>安装地址<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a></p></blockquote><p>我们找到 <code>linux</code>系统版本，复制这个链接</p><blockquote><p>wget <a href="https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz" target="_blank" rel="noopener">https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz</a></p></blockquote><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202001/10/1_1578646097_Lsyt7j1IMP.png" alt="image.png"></p><h2 id="第二部解压"><a href="#第二部解压" class="headerlink" title="第二部解压"></a>第二部解压</h2><blockquote><p>tar -C /usr/local -xzf go1.13.6.linux-amd64.tar.gz</p></blockquote><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202001/10/1_1578646131_uKxBOtfAut.png" alt="linux系统搭建golang环境"></p><h2 id="第三步添加环境变量到-etc-profile"><a href="#第三步添加环境变量到-etc-profile" class="headerlink" title="第三步添加环境变量到 /etc/profile"></a>第三步添加环境变量到 <code>/etc/profile</code></h2><ul><li>打开 <code>/etc/profile</code> 文件</li><li>添加 export PATH=$PATH:/usr/local/go/bin</li><li>重新加载 <code>source /etc/profile</code></li></ul><h2 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h2><pre class=" language-bash"><code class="language-bash">go --version</code></pre><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202001/10/1_1578646097_Lsyt7j1IMP.png" alt="linux系统搭建golang环境"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://golang.google.cn/doc/install?download=go1.13.6.linux-amd64.tar.gz" target="_blank" rel="noopener">golang官方文档</a></p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/51">https://www.zhanggaoyuan.com/article/51</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux 服务器生成 github ssh</title>
      <link href="/article/a0bb4ed9.html"/>
      <url>/article/a0bb4ed9.html</url>
      
        <content type="html"><![CDATA[<h2 id="服务器生成-git-ssh-步骤详细记录："><a href="#服务器生成-git-ssh-步骤详细记录：" class="headerlink" title="服务器生成 git ssh 步骤详细记录："></a>服务器生成 git ssh 步骤详细记录：</h2><h3 id="1-首先检查自己之前是否有生成"><a href="#1-首先检查自己之前是否有生成" class="headerlink" title="1. 首先检查自己之前是否有生成"></a>1. 首先检查自己之前是否有生成</h3><blockquote><p>$ ls -al ~/.ssh  </p></blockquote><h3 id="2-检查自己是否有配置过git-全局配置"><a href="#2-检查自己是否有配置过git-全局配置" class="headerlink" title="2. 检查自己是否有配置过git 全局配置"></a>2. 检查自己是否有配置过git 全局配置</h3><blockquote><p>git config user.name<br>git config user.email</p></blockquote><p>以上两个命令可以检查是否已经有配置过 github 全局配置信息，配置过是如下显示</p><pre><code>[root@VM_0_13_centos wwwroot]# git config user.nameJeffreyBool</code></pre><p>如果没有配置，可以通过以下命令设置</p><blockquote><p>git config –global user.name ‘你的github名称’<br>git config user.email ‘你的 github 邮箱’</p></blockquote><h3 id="3-生成秘钥"><a href="#3-生成秘钥" class="headerlink" title="3. 生成秘钥"></a>3. 生成秘钥</h3><blockquote><p>ssh-keygen -t rsa -C ‘你的 github 邮箱’</p></blockquote><p>步骤如下:</p><pre><code>[root@VM_0_13_centos .ssh]# ssh-keygen -t rsa -C '1402992668@qq.com'Generating public/private rsa key pair.▽Enter file in which to save the key (/root/.ssh/id_rsa): githubEnter passphrase (empty for no passphrase):Enter same passphrase again:Your identification has been saved in github.Your public key has been saved in github.pub.The key fingerprint is:SHA256:rCizfSAB6nxdIUNCrKclfsm+xXnCjoAMv+WNMmVhnPg 1402992668@qq.comThe key's randomart image is:+---[RSA 2048]----+|  oo..           ||.  ..o .         ||...o .o .        ||.ooo=  o         ||= *+o.. S        ||+*.=Eo..         ||.oB+oB..         ||  +X+o+          ||  o==o.          |+----[SHA256]-----+</code></pre><ul><li>查看生成的文件</li></ul><blockquote><p>ll </p></blockquote><pre><code> -rw------- 1 root root  794 10月 16 20:37 authorized_keys-rw------- 1 root root 1679 12月 30 20:40 github-rw-r--r-- 1 root root  399 12月 30 20:40 github.pub</code></pre><p>这时候我们已经生成完毕。</p><h3 id="3-如果想登陆远端，则需要将rsa-pub里的秘钥添加到远端。"><a href="#3-如果想登陆远端，则需要将rsa-pub里的秘钥添加到远端。" class="headerlink" title="3. 如果想登陆远端，则需要将rsa.pub里的秘钥添加到远端。"></a>3. 如果想登陆远端，则需要将rsa.pub里的秘钥添加到远端。</h3><ul><li>首先，去.ssh目录下找到<code>github.pub</code>这个文件夹打开复制全部内容。</li><li>登录GitHub，进入你的Settings</li></ul><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202003/03/1_1583215014_qyWInUvrFV.png" alt="image.png">)<img src="media/15777098619113/15777104858355.jpg" alt=""></p><ul><li>会看到左边这些目录，点击SSH and GPG keys</li></ul><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202003/03/1_1583215030_UbsjRj6wha.png" alt="image.png">)<img src="media/15777098619113/15777105819556.jpg" alt=""></p><ul><li><p>创建New SSH key</p><p><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202003/03/1_1583215050_zfgeuNftkf.png" alt="image.png">)<img src="media/15777098619113/15777106443651.jpg" alt=""></p></li><li><p>点击Add SSH key</p></li><li><p>再弹出窗口，输入你的GitHub密码，点击确认按钮。</p></li><li><p>到此，就大功告成了。</p></li></ul><h3 id="4-测试。"><a href="#4-测试。" class="headerlink" title="4.测试。"></a>4.测试。</h3><blockquote><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p></blockquote><pre><code>[root@VM_0_13_centos ~]# ssh-add ~/.ssh/githubCould not open a connection to your authentication agent.</code></pre><p>发现出现以上报错信息</p><blockquote><p>ssh-agent bash</p></blockquote><p>我百度了解决方案使用以下命令可以解决以上的问题。</p><blockquote><p>ssh -T <a href="mailto:git@github.com">git@github.com</a><br>按回车键，如看到以下信息，那么就完美了。</p></blockquote><pre><code>[root@VM_0_13_centos ~]# ssh -T git@github.comHi JeffreyBool! You've successfully authenticated, but GitHub does not provide shell access.</code></pre><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/54">https://www.zhanggaoyuan.com/article/54</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> github </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 实现登录失败次数限制登录</title>
      <link href="/article/36a45cef.html"/>
      <url>/article/36a45cef.html</url>
      
        <content type="html"><![CDATA[<p>在默认的 auth 的 <code>LoginControoler</code> usr的trait <code>AuthenticatesUsers</code><br><code>Illuminate\Foundation\Auth\ThrottlesLogins</code>这个trait有如下方法</p><pre class=" language-php"><code class="language-php"><span class="token function">limiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// limiter方法，从服务容器获取 RateLimiter 实例，专门连接缓存记录用户登录次数；</span><span class="token function">throttleKey</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 该方法的内部代码为 return Str::lower($request->input($this->username())).'|'.$request->ip();</span><span class="token comment" spellcheck="true">// 返回的值为 缓存数据库中的Key; </span><span class="token comment" spellcheck="true">// 比如 张三从 192.168.1.11 登录系统，5次尝试登录失败，那么此处的返回值是 张三 | 192.168.1.11</span><span class="token comment" spellcheck="true">// 缓存数据库中有一条记录是 键名为 '张三 | 192.168.1.11'， 键值为 '5'</span><span class="token function">hasTooManyLoginAttempts</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断是否用户失败登录频率超过门槛值(1分钟内失败5次)；</span><span class="token function">incrementLoginAttempts</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户在缓存数据库中的登录次数值，如果存在则加1；不存在，则新增，同时设置过期时间（默认是1分钟）</span><span class="token function">sendLockoutResponse</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这方法被调用意味着用户已经超过登录上限，此时方法会 back 到登录页，并携带'登录超过上限，请于58秒后再次登录'这样的提示； </span><span class="token function">clearLoginAttempts</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清除指定用户在缓存数据库中的登录次数记录，包括Lock记录；</span><span class="token function">fireLockoutEvent</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法内部就一句话，event(new Lockout($request)); 触发 lockout 事件</span></code></pre><p>Laravel 本身已实现了登录失败次数限制的功能。在使用 Laravel 的登录验证时，登录失败次数限制预设是：「失败5次，1分钟后才可再次登录。」但如果要求的功能是：「失败3次，1分钟后才可登录；再失败3次，3分钟后才可登录；再失败3次，5分钟后才可登录。」要如何实现？下面将实际示范此登录失败次数限制的功能。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Laravel 5.5 以上</p><h2 id="改写登录类别设定"><a href="#改写登录类别设定" class="headerlink" title="改写登录类别设定"></a>改写登录类别设定</h2><p><em>app\Http\Controllers\Auth\LoginController.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>AuthenticatesUsers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>AdvancedRateLimiter</span><span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">AuthenticatesUsers</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Get the rate limiter instance.     *     * @return \App\Cache\AdvancedRateLimiter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">limiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span>AdvancedRateLimiter<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The maximum number of attempts to allow.     *     * @var integer     */</span>    <span class="token keyword">protected</span> <span class="token variable">$maxAttempts</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The number of minutes to throttle for.     *     * @var integer|array     */</span>    <span class="token keyword">protected</span> <span class="token variable">$decayMinutes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 <code>LoginController</code> 类中，增加自订方法复盖掉 <code>AuthenticatesUsers</code> 类原本的方法：</p><ul><li><code>limiter</code> 方法是返回登录失败次数限制的类，原本是返回 <code>RateLimiter</code> 类(实现登录失败次数限制的类)，但本例要扩充新方法，因此返回了我们下面创建的子类别 <code>AdvancedRateLimiter</code> 。</li><li><code>$maxAttempts</code> 属性是设定登录失败次数。</li><li><code>$decayMinutes</code> 属性是登录失败达上限后，须等待的分钟数。但我们要实现的功能是每次都等待不一样的时间，因此传入一个数组，输入每次的等待分钟数。</li></ul><p>如果只是要修改 Laravel 原本的次数设定，新增 <code>$maxAttempts</code> 属性及 <code>$decayMinutes</code> 属性并设定值即可完成。</p><h2 id="擴充登录失败次数限制功能"><a href="#擴充登录失败次数限制功能" class="headerlink" title="擴充登录失败次数限制功能"></a>擴充登录失败次数限制功能</h2><p>新增类别 <code>AdvancedRateLimiter</code>：</p><p><em>app\Cache\AdvancedRateLimiter.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>RateLimiter</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AdvancedRateLimiter</span> <span class="token keyword">extends</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Increment the counter for a given key for a given decay time.     *     * @param  string  $key     * @param  float|int|array  $decayMinutes     * @return int     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">hit</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$decayMinutes</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':timer'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1440</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token variable">$step</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$step</span> <span class="token operator">=</span> <span class="token variable">$step</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$step</span> <span class="token punctuation">:</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$decayMinutes</span> <span class="token operator">=</span> <span class="token variable">$decayMinutes</span><span class="token punctuation">[</span><span class="token variable">$step</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">hit</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addMinutes</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Clear the hits and lockout timer for the given key.     *     * @param  string  $key     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>hit</code> 方法是在登錄錯誤後，執行登錄錯誤次數記錄遞增的方法。為了實現每次登錄錯誤等待的時間可以不一樣，我們讓傳入的變數 <code>$decayMinutes</code> 可以接受傳入数组，第一次登錄錯誤等待時間為 <code>数组[0]</code> 的分鐘數(本例為1分鐘)，第二次為 <code>数组[1]</code> 的分鐘數(例：3分鐘)，而第三次為 <code>数组[2]</code> 的分鐘數(例：5分鐘)，之後的登錄錯誤等待時間皆為数组的最後的元素的分鐘數。</li><li><code>clear</code> 是成功登入後，將時間、次數重設，下一次再登入錯誤後，將從頭開始計數。</li></ul><p>此時登录失败次数限制的功能已改寫完成，再次登入並輸入錯誤的帳號或密碼，重複數次即可看到結果。</p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/55">https://www.zhanggaoyuan.com/article/55</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang获取文章摘要算法性能详细对比</title>
      <link href="/article/3f02e521.html"/>
      <url>/article/3f02e521.html</url>
      
        <content type="html"><![CDATA[<p>为了测试 golang <code>ioutil.ReadAll</code> 、<code>io.Copy</code>、<code>bufio.NewReader</code> 性能 我写了三个函数，函数代码如下:</p><h2 id="golang-读取文件性能对比"><a href="#golang-读取文件性能对比" class="headerlink" title="golang 读取文件性能对比"></a>golang 读取文件性能对比</h2><h3 id="ioutil-ReadAll"><a href="#ioutil-ReadAll" class="headerlink" title="ioutil.ReadAll"></a><code>ioutil.ReadAll</code></h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ReadAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileMD5 <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>    fileMD5 <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="io-copy"><a href="#io-copy" class="headerlink" title="io.copy"></a><code>io.copy</code></h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Copy</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileMD5 <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    md5hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>md5hash<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    fileMD5 <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>md5hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="bufio-NewReader"><a href="#bufio-NewReader" class="headerlink" title="bufio.NewReader"></a><code>bufio.NewReader</code></h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ReadBuf</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileMD5 <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    md5hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        n<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遇到任何错误立即返回，并忽略 EOF 错误信息</span>            <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>                <span class="token keyword">goto</span> stop            <span class="token punctuation">}</span>            <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        md5hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>stop<span class="token punctuation">:</span>    fileMD5 <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>md5hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> file_test<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span>    <span class="token string">"filestore/test/file"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    minPath <span class="token operator">=</span> <span class="token string">"~/6d827d1edddea7c73fb7d6efbb467167839ff2f6.jpg"</span>    maxPath <span class="token operator">=</span> <span class="token string">"/Users/zhanggaoyuan/学习/2004.mkv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">BenchmarkReadAll</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>minPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkCopy</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>minPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkReadBuf</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">ReadBuf</span><span class="token punctuation">(</span>minPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文件大小耗时情况"><a href="#文件大小耗时情况" class="headerlink" title="文件大小耗时情况"></a>文件大小耗时情况</h2><h3 id="小于等于-10MB-的文件耗时情况"><a href="#小于等于-10MB-的文件耗时情况" class="headerlink" title="小于等于 10MB 的文件耗时情况"></a>小于等于 <code>10MB</code> 的文件耗时情况</h3><p>准备 6d827d1edddea7c73fb7d6efbb467167839ff2f6.jpg 9.7M 的文件，</p><p>执行 <code>go test -bench=. -benchmem</code> 就可以看到详细的信息啦</p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             64      17963784 ns/op    33552812 B/op          22 allocs/opBenchmarkCopy-8                80      12910267 ns/op       33192 B/op           8 allocs/opBenchmarkReadBuf-8             66      15641888 ns/op        5544 B/op           9 allocs/opPASSok      filestore/test/file    3.994s</code></pre><p>我们可以看出 <code>BenchmarkCopy</code> 性能最高，执行 84 次平均时间 12910267 纳秒，也就是 1.2 秒左右的样子啦。</p><h3 id="小于等于-40MB-的文件耗时情况"><a href="#小于等于-40MB-的文件耗时情况" class="headerlink" title="小于等于 40MB 的文件耗时情况"></a>小于等于 <code>40MB</code> 的文件耗时情况</h3><p>准备文件 niushop_b2c_mf2.3.zip 37M</p><p>执行 <code>go test -bench=. -benchmem</code> 就可以看到详细的信息啦</p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             16      63298080 ns/op    134216088 B/op          24 allocs/opBenchmarkCopy-8                24      48085580 ns/op       33176 B/op           8 allocs/opBenchmarkReadBuf-8             19      58120592 ns/op        5528 B/op           9 allocs/opPASSok      filestore/test/file    4.206s</code></pre><p>我们还是可以看到 <code>BenchmarkCopy</code> 函数性能最高</p><h3 id="大于等于-1G-小于等于-6G的文件耗时情况"><a href="#大于等于-1G-小于等于-6G的文件耗时情况" class="headerlink" title="大于等于 1G 小于等于 6G的文件耗时情况"></a>大于等于 <code>1G</code> 小于等于 <code>6G</code>的文件耗时情况</h3><p>注意一点的就是当我们测试大文件读取不能直接使用 <code>ioutil.ReadAll</code>, 因为这个函数会直接把文件的全部内容加载到内存中，这样会导致内存直接崩溃。我们只使用 <code>io.copy</code> 和 bufio.NewReader 函数，太大了刚不住，我也很无奈啊~~😆😆😆😆</p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkCopy-8                 1    8612443012 ns/op       33176 B/op          10 allocs/opBenchmarkReadBuf-8              1    8924705447 ns/op        5512 B/op           9 allocs/opPASSok      filestore/test/file    17.554s</code></pre><p>我们比较这两个函数的性能发现具体差别不是太大。 单还是 <code>BenchmarkCopy</code> 性能更快。。。，好啦没得话说选 <code>io.copy</code> 啦</p><h2 id="接下来分析-md5-和-sha1-哪个算法计算更快"><a href="#接下来分析-md5-和-sha1-哪个算法计算更快" class="headerlink" title="接下来分析 md5 和 sha1 哪个算法计算更快"></a>接下来分析 <code>md5</code> 和 <code>sha1</code> 哪个算法计算更快</h2><p>我们还是用不同的文件做比较，因为有时候很多函数的时间和空间复杂度和大小，数量有关系</p><h3 id="小于等于10MB-的文件耗时情况"><a href="#小于等于10MB-的文件耗时情况" class="headerlink" title="小于等于10MB 的文件耗时情况"></a>小于等于<code>10MB</code> 的文件耗时情况</h3><p><code>sha1</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             64      17963784 ns/op    33552812 B/op          22 allocs/opBenchmarkCopy-8                80      12910267 ns/op       33192 B/op           8 allocs/opBenchmarkReadBuf-8             66      15641888 ns/op        5544 B/op           9 allocs/opPASSok      filestore/test/file    3.994s</code></pre><p><code>md5</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             56      20431688 ns/op    33552750 B/op          22 allocs/opBenchmarkCopy-8                70      16554352 ns/op       33128 B/op           8 allocs/opBenchmarkReadBuf-8             57      19220965 ns/op        5480 B/op           9 allocs/opPASSok      filestore/test/file    4.202s</code></pre><h3 id="小于等于-40MB-的文件耗时情况-1"><a href="#小于等于-40MB-的文件耗时情况-1" class="headerlink" title="小于等于 40MB 的文件耗时情况"></a>小于等于 <code>40MB</code> 的文件耗时情况</h3><p><code>sha1</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             16      63298080 ns/op    134216088 B/op          24 allocs/opBenchmarkCopy-8                24      48085580 ns/op       33176 B/op           8 allocs/opBenchmarkReadBuf-8             19      58120592 ns/op        5528 B/op           9 allocs/opPASSok      filestore/test/file    4.206s</code></pre><p><code>md5</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             14      75987790 ns/op    134216024 B/op          24 allocs/opBenchmarkCopy-8                19      61600369 ns/op       33112 B/op           8 allocs/opBenchmarkReadBuf-8             15      72338837 ns/op        5464 B/op           9 allocs/opPASSok      filestore/test/file    4.339s</code></pre><h3 id="大于等于-1G-小于等于-6G的文件耗时情况-1"><a href="#大于等于-1G-小于等于-6G的文件耗时情况-1" class="headerlink" title="大于等于 1G 小于等于 6G的文件耗时情况"></a>大于等于 <code>1G</code> 小于等于 <code>6G</code>的文件耗时情况</h3><p><code>sha1</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkCopy-8                 1    8612443012 ns/op       33176 B/op          10 allocs/opBenchmarkReadBuf-8              1    8924705447 ns/op        5512 B/op           9 allocs/opPASSok      filestore/test/file    17.554s</code></pre><p><code>md5</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkCopy-8                 1    8714197367 ns/op       33112 B/op          10 allocs/opBenchmarkReadBuf-8              1    10077543682 ns/op        5448 B/op           9 allocs/opPASSok      filestore/test/file    18.804s</code></pre><blockquote><p>最终我们可以看到 <code>sha1</code> 算法不管是大文件还是小文件都优于 <code>md5</code> 文件的性能。至此还用比吗？傻子才不选 <code>sha1</code> 算法呢~, 最终选 <code>io.copy</code> 和 <code>sha1</code></p></blockquote><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/58">https://www.zhanggaoyuan.com/article/58</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 锁请小心使用</title>
      <link href="/article/9e862485.html"/>
      <url>/article/9e862485.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于锁使用"><a href="#关于锁使用" class="headerlink" title="关于锁使用"></a>关于锁使用</h2><p> 减少读写锁粒度和范围大小，尽可能尽早释放，锁和 <code>defer</code> 配合使用容易踩坑，因为会出现死锁，意思就是，这段代码可能会重复加锁，这种问题可能是偶发引起的，所以很难排查。</p><ol><li><p>提前 <code>unlock</code><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744022_k7ZtwmAx9H.png" alt="golang 锁请小心使用"></p></li><li><p>不能提前 <code>unlock</code> 怎么办？如何处理???<br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744031_4Ay8Ub0Ntd.png" alt="golang 锁请小心使用"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744040_vMvix7i2KO.png" alt="golang 锁请小心使用"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744050_ewlAjsdhpx.png" alt="golang 锁请小心使用"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744056_VlDn6KYxy9.png" alt="golang 锁请小心使用"></p></li></ol><p>以上就是处理锁提前返回防止坑，能够知道锁什么时间释放很重要，往往很多坑就是这个函数已经 <code>lock</code> 锁了，然后再调用另外一个函数 <code>a-&gt;b-&gt;c-&gt;d</code>， 如此调用链；你不会知道这些函数是否也调用了这个函数的锁实例，导致死锁的发生。而且还有一点，像上图的 <code>SendMessage</code> 可能是一个耗时调用，那么这个锁就会一直阻塞在这里得不到释放。像我遇到的一个坑就是调用 <code>SendMessage</code> 函数，然后这个函数给客户端发送消息，然后由于客户端种种原因导致消息发送失败触发我的 close 函数，然后 close 内部处理资源清理导致再调用这个锁实例的函数导致重复加锁，这个 😭😭<code>BUG</code> 隐藏的很深，一般看不出来。</p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/61">https://www.zhanggaoyuan.com/article/61</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
