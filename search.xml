<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>laravel 实现登录失败次数限制登录</title>
      <link href="/2020/06/05/laravel-shi-xian-deng-lu-shi-bai-ci-shu-xian-zhi-deng-lu/"/>
      <url>/2020/06/05/laravel-shi-xian-deng-lu-shi-bai-ci-shu-xian-zhi-deng-lu/</url>
      
        <content type="html"><![CDATA[<p>在默认的 auth 的 <code>LoginControoler</code> usr的trait <code>AuthenticatesUsers</code><br><code>Illuminate\Foundation\Auth\ThrottlesLogins</code>这个trait有如下方法</p><pre class=" language-php"><code class="language-php"><span class="token function">limiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// limiter方法，从服务容器获取 RateLimiter 实例，专门连接缓存记录用户登录次数；</span><span class="token function">throttleKey</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 该方法的内部代码为 return Str::lower($request->input($this->username())).'|'.$request->ip();</span><span class="token comment" spellcheck="true">// 返回的值为 缓存数据库中的Key; </span><span class="token comment" spellcheck="true">// 比如 张三从 192.168.1.11 登录系统，5次尝试登录失败，那么此处的返回值是 张三 | 192.168.1.11</span><span class="token comment" spellcheck="true">// 缓存数据库中有一条记录是 键名为 '张三 | 192.168.1.11'， 键值为 '5'</span><span class="token function">hasTooManyLoginAttempts</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断是否用户失败登录频率超过门槛值(1分钟内失败5次)；</span><span class="token function">incrementLoginAttempts</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户在缓存数据库中的登录次数值，如果存在则加1；不存在，则新增，同时设置过期时间（默认是1分钟）</span><span class="token function">sendLockoutResponse</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这方法被调用意味着用户已经超过登录上限，此时方法会 back 到登录页，并携带'登录超过上限，请于58秒后再次登录'这样的提示； </span><span class="token function">clearLoginAttempts</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清除指定用户在缓存数据库中的登录次数记录，包括Lock记录；</span><span class="token function">fireLockoutEvent</span><span class="token punctuation">(</span>Request <span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方法内部就一句话，event(new Lockout($request)); 触发 lockout 事件</span></code></pre><p>Laravel 本身已实现了登录失败次数限制的功能。在使用 Laravel 的登录验证时，登录失败次数限制预设是：「失败5次，1分钟后才可再次登录。」但如果要求的功能是：「失败3次，1分钟后才可登录；再失败3次，3分钟后才可登录；再失败3次，5分钟后才可登录。」要如何实现？下面将实际示范此登录失败次数限制的功能。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>Laravel 5.5 以上</p><h2 id="改写登录类别设定"><a href="#改写登录类别设定" class="headerlink" title="改写登录类别设定"></a>改写登录类别设定</h2><p><em>app\Http\Controllers\Auth\LoginController.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>AuthenticatesUsers</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>AdvancedRateLimiter</span><span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>    <span class="token keyword">use</span> <span class="token package">AuthenticatesUsers</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment" spellcheck="true">/**     * Get the rate limiter instance.     *     * @return \App\Cache\AdvancedRateLimiter     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">limiter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span>AdvancedRateLimiter<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * The maximum number of attempts to allow.     *     * @var integer     */</span>    <span class="token keyword">protected</span> <span class="token variable">$maxAttempts</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The number of minutes to throttle for.     *     * @var integer|array     */</span>    <span class="token keyword">protected</span> <span class="token variable">$decayMinutes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在 <code>LoginController</code> 类中，增加自订方法复盖掉 <code>AuthenticatesUsers</code> 类原本的方法：</p><ul><li><code>limiter</code> 方法是返回登录失败次数限制的类，原本是返回 <code>RateLimiter</code> 类(实现登录失败次数限制的类)，但本例要扩充新方法，因此返回了我们下面创建的子类别 <code>AdvancedRateLimiter</code> 。</li><li><code>$maxAttempts</code> 属性是设定登录失败次数。</li><li><code>$decayMinutes</code> 属性是登录失败达上限后，须等待的分钟数。但我们要实现的功能是每次都等待不一样的时间，因此传入一个数组，输入每次的等待分钟数。</li></ul><p>如果只是要修改 Laravel 原本的次数设定，新增 <code>$maxAttempts</code> 属性及 <code>$decayMinutes</code> 属性并设定值即可完成。</p><h2 id="擴充登录失败次数限制功能"><a href="#擴充登录失败次数限制功能" class="headerlink" title="擴充登录失败次数限制功能"></a>擴充登录失败次数限制功能</h2><p>新增类别 <code>AdvancedRateLimiter</code>：</p><p><em>app\Cache\AdvancedRateLimiter.php</em></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Cache</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Cache<span class="token punctuation">\</span>RateLimiter</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">AdvancedRateLimiter</span> <span class="token keyword">extends</span> <span class="token class-name">RateLimiter</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Increment the counter for a given key for a given decay time.     *     * @param  string  $key     * @param  float|int|array  $decayMinutes     * @return int     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">hit</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$decayMinutes</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':timer'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">has</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1440</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token variable">$step</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$step</span> <span class="token operator">=</span> <span class="token variable">$step</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$step</span> <span class="token punctuation">:</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token variable">$decayMinutes</span> <span class="token operator">=</span> <span class="token variable">$decayMinutes</span><span class="token punctuation">[</span><span class="token variable">$step</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">hit</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addMinutes</span><span class="token punctuation">(</span><span class="token variable">$decayMinutes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Clear the hits and lockout timer for the given key.     *     * @param  string  $key     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">cache</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">forget</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">':step'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><code>hit</code> 方法是在登錄錯誤後，執行登錄錯誤次數記錄遞增的方法。為了實現每次登錄錯誤等待的時間可以不一樣，我們讓傳入的變數 <code>$decayMinutes</code> 可以接受傳入数组，第一次登錄錯誤等待時間為 <code>数组[0]</code> 的分鐘數(本例為1分鐘)，第二次為 <code>数组[1]</code> 的分鐘數(例：3分鐘)，而第三次為 <code>数组[2]</code> 的分鐘數(例：5分鐘)，之後的登錄錯誤等待時間皆為数组的最後的元素的分鐘數。</li><li><code>clear</code> 是成功登入後，將時間、次數重設，下一次再登入錯誤後，將從頭開始計數。</li></ul><p>此時登录失败次数限制的功能已改寫完成，再次登入並輸入錯誤的帳號或密碼，重複數次即可看到結果。</p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/55" target="_blank" rel="noopener">https://www.zhanggaoyuan.com/article/55</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> laravel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang获取文章摘要算法性能详细对比</title>
      <link href="/2020/06/05/golang-huo-qu-wen-zhang-zhai-yao-suan-fa-xing-neng-xiang-xi-dui-bi/"/>
      <url>/2020/06/05/golang-huo-qu-wen-zhang-zhai-yao-suan-fa-xing-neng-xiang-xi-dui-bi/</url>
      
        <content type="html"><![CDATA[<p>为了测试 golang <code>ioutil.ReadAll</code> 、<code>io.Copy</code>、<code>bufio.NewReader</code> 性能 我写了三个函数，函数代码如下:</p><h2 id="golang-读取文件性能对比"><a href="#golang-读取文件性能对比" class="headerlink" title="golang 读取文件性能对比"></a>golang 读取文件性能对比</h2><h3 id="ioutil-ReadAll"><a href="#ioutil-ReadAll" class="headerlink" title="ioutil.ReadAll"></a><code>ioutil.ReadAll</code></h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ReadAll</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileMD5 <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>    fileMD5 <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="io-copy"><a href="#io-copy" class="headerlink" title="io.copy"></a><code>io.copy</code></h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Copy</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileMD5 <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    md5hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>md5hash<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    fileMD5 <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>md5hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="bufio-NewReader"><a href="#bufio-NewReader" class="headerlink" title="bufio.NewReader"></a><code>bufio.NewReader</code></h3><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">ReadBuf</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>fileMD5 <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>    md5hash <span class="token operator">:=</span> sha1<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        n<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 遇到任何错误立即返回，并忽略 EOF 错误信息</span>            <span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span>                <span class="token keyword">goto</span> stop            <span class="token punctuation">}</span>            <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> err        <span class="token punctuation">}</span>        md5hash<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>stop<span class="token punctuation">:</span>    fileMD5 <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>md5hash<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> fileMD5<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> file_test<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"testing"</span>    <span class="token string">"filestore/test/file"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    minPath <span class="token operator">=</span> <span class="token string">"~/6d827d1edddea7c73fb7d6efbb467167839ff2f6.jpg"</span>    maxPath <span class="token operator">=</span> <span class="token string">"/Users/zhanggaoyuan/学习/2004.mkv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">BenchmarkReadAll</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>minPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkCopy</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>minPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">BenchmarkReadBuf</span><span class="token punctuation">(</span>b <span class="token operator">*</span>testing<span class="token punctuation">.</span>B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> file<span class="token punctuation">.</span><span class="token function">ReadBuf</span><span class="token punctuation">(</span>minPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            b<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文件大小耗时情况"><a href="#文件大小耗时情况" class="headerlink" title="文件大小耗时情况"></a>文件大小耗时情况</h2><h3 id="小于等于-10MB-的文件耗时情况"><a href="#小于等于-10MB-的文件耗时情况" class="headerlink" title="小于等于 10MB 的文件耗时情况"></a>小于等于 <code>10MB</code> 的文件耗时情况</h3><p>准备 6d827d1edddea7c73fb7d6efbb467167839ff2f6.jpg 9.7M 的文件，</p><p>执行 <code>go test -bench=. -benchmem</code> 就可以看到详细的信息啦</p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             64      17963784 ns/op    33552812 B/op          22 allocs/opBenchmarkCopy-8                80      12910267 ns/op       33192 B/op           8 allocs/opBenchmarkReadBuf-8             66      15641888 ns/op        5544 B/op           9 allocs/opPASSok      filestore/test/file    3.994s</code></pre><p>我们可以看出 <code>BenchmarkCopy</code> 性能最高，执行 84 次平均时间 12910267 纳秒，也就是 1.2 秒左右的样子啦。</p><h3 id="小于等于-40MB-的文件耗时情况"><a href="#小于等于-40MB-的文件耗时情况" class="headerlink" title="小于等于 40MB 的文件耗时情况"></a>小于等于 <code>40MB</code> 的文件耗时情况</h3><p>准备文件 niushop_b2c_mf2.3.zip 37M</p><p>执行 <code>go test -bench=. -benchmem</code> 就可以看到详细的信息啦</p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             16      63298080 ns/op    134216088 B/op          24 allocs/opBenchmarkCopy-8                24      48085580 ns/op       33176 B/op           8 allocs/opBenchmarkReadBuf-8             19      58120592 ns/op        5528 B/op           9 allocs/opPASSok      filestore/test/file    4.206s</code></pre><p>我们还是可以看到 <code>BenchmarkCopy</code> 函数性能最高</p><h3 id="大于等于-1G-小于等于-6G的文件耗时情况"><a href="#大于等于-1G-小于等于-6G的文件耗时情况" class="headerlink" title="大于等于 1G 小于等于 6G的文件耗时情况"></a>大于等于 <code>1G</code> 小于等于 <code>6G</code>的文件耗时情况</h3><p>注意一点的就是当我们测试大文件读取不能直接使用 <code>ioutil.ReadAll</code>, 因为这个函数会直接把文件的全部内容加载到内存中，这样会导致内存直接崩溃。我们只使用 <code>io.copy</code> 和 bufio.NewReader 函数，太大了刚不住，我也很无奈啊~~😆😆😆😆</p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkCopy-8                 1    8612443012 ns/op       33176 B/op          10 allocs/opBenchmarkReadBuf-8              1    8924705447 ns/op        5512 B/op           9 allocs/opPASSok      filestore/test/file    17.554s</code></pre><p>我们比较这两个函数的性能发现具体差别不是太大。 单还是 <code>BenchmarkCopy</code> 性能更快。。。，好啦没得话说选 <code>io.copy</code> 啦</p><h2 id="接下来分析-md5-和-sha1-哪个算法计算更快"><a href="#接下来分析-md5-和-sha1-哪个算法计算更快" class="headerlink" title="接下来分析 md5 和 sha1 哪个算法计算更快"></a>接下来分析 <code>md5</code> 和 <code>sha1</code> 哪个算法计算更快</h2><p>我们还是用不同的文件做比较，因为有时候很多函数的时间和空间复杂度和大小，数量有关系</p><h3 id="小于等于10MB-的文件耗时情况"><a href="#小于等于10MB-的文件耗时情况" class="headerlink" title="小于等于10MB 的文件耗时情况"></a>小于等于<code>10MB</code> 的文件耗时情况</h3><p><code>sha1</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             64      17963784 ns/op    33552812 B/op          22 allocs/opBenchmarkCopy-8                80      12910267 ns/op       33192 B/op           8 allocs/opBenchmarkReadBuf-8             66      15641888 ns/op        5544 B/op           9 allocs/opPASSok      filestore/test/file    3.994s</code></pre><p><code>md5</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             56      20431688 ns/op    33552750 B/op          22 allocs/opBenchmarkCopy-8                70      16554352 ns/op       33128 B/op           8 allocs/opBenchmarkReadBuf-8             57      19220965 ns/op        5480 B/op           9 allocs/opPASSok      filestore/test/file    4.202s</code></pre><h3 id="小于等于-40MB-的文件耗时情况-1"><a href="#小于等于-40MB-的文件耗时情况-1" class="headerlink" title="小于等于 40MB 的文件耗时情况"></a>小于等于 <code>40MB</code> 的文件耗时情况</h3><p><code>sha1</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             16      63298080 ns/op    134216088 B/op          24 allocs/opBenchmarkCopy-8                24      48085580 ns/op       33176 B/op           8 allocs/opBenchmarkReadBuf-8             19      58120592 ns/op        5528 B/op           9 allocs/opPASSok      filestore/test/file    4.206s</code></pre><p><code>md5</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkReadAll-8             14      75987790 ns/op    134216024 B/op          24 allocs/opBenchmarkCopy-8                19      61600369 ns/op       33112 B/op           8 allocs/opBenchmarkReadBuf-8             15      72338837 ns/op        5464 B/op           9 allocs/opPASSok      filestore/test/file    4.339s</code></pre><h3 id="大于等于-1G-小于等于-6G的文件耗时情况-1"><a href="#大于等于-1G-小于等于-6G的文件耗时情况-1" class="headerlink" title="大于等于 1G 小于等于 6G的文件耗时情况"></a>大于等于 <code>1G</code> 小于等于 <code>6G</code>的文件耗时情况</h3><p><code>sha1</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkCopy-8                 1    8612443012 ns/op       33176 B/op          10 allocs/opBenchmarkReadBuf-8              1    8924705447 ns/op        5512 B/op           9 allocs/opPASSok      filestore/test/file    17.554s</code></pre><p><code>md5</code></p><pre><code>goos: darwingoarch: amd64pkg: filestore/test/fileBenchmarkCopy-8                 1    8714197367 ns/op       33112 B/op          10 allocs/opBenchmarkReadBuf-8              1    10077543682 ns/op        5448 B/op           9 allocs/opPASSok      filestore/test/file    18.804s</code></pre><blockquote><p>最终我们可以看到 <code>sha1</code> 算法不管是大文件还是小文件都优于 <code>md5</code> 文件的性能。至此还用比吗？傻子才不选 <code>sha1</code> 算法呢~, 最终选 <code>io.copy</code> 和 <code>sha1</code></p></blockquote><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/58" target="_blank" rel="noopener">https://www.zhanggaoyuan.com/article/58</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang 锁请小心使用</title>
      <link href="/2020/06/05/golang-suo-qing-xiao-xin-shi-yong/"/>
      <url>/2020/06/05/golang-suo-qing-xiao-xin-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="关于锁使用"><a href="#关于锁使用" class="headerlink" title="关于锁使用"></a>关于锁使用</h2><p> 减少读写锁粒度和范围大小，尽可能尽早释放，锁和 <code>defer</code> 配合使用容易踩坑，因为会出现死锁，意思就是，这段代码可能会重复加锁，这种问题可能是偶发引起的，所以很难排查。</p><ol><li><p>提前 <code>unlock</code><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744022_k7ZtwmAx9H.png" alt="golang 锁请小心使用"></p></li><li><p>不能提前 <code>unlock</code> 怎么办？如何处理???<br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744031_4Ay8Ub0Ntd.png" alt="golang 锁请小心使用"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744040_vMvix7i2KO.png" alt="golang 锁请小心使用"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744050_ewlAjsdhpx.png" alt="golang 锁请小心使用"><br><img src="https://api.zhanggaoyuan.com/uploads/images/articles/202005/29/1_1590744056_VlDn6KYxy9.png" alt="golang 锁请小心使用"></p></li></ol><p>以上就是处理锁提前返回防止坑，能够知道锁什么时间释放很重要，往往很多坑就是这个函数已经 <code>lock</code> 锁了，然后再调用另外一个函数 <code>a-&gt;b-&gt;c-&gt;d</code>， 如此调用链；你不会知道这些函数是否也调用了这个函数的锁实例，导致死锁的发生。而且还有一点，像上图的 <code>SendMessage</code> 可能是一个耗时调用，那么这个锁就会一直阻塞在这里得不到释放。像我遇到的一个坑就是调用 <code>SendMessage</code> 函数，然后这个函数给客户端发送消息，然后由于客户端种种原因导致消息发送失败触发我的 close 函数，然后 close 内部处理资源清理导致再调用这个锁实例的函数导致重复加锁，这个 😭😭<code>BUG</code> 隐藏的很深，一般看不出来。</p><p>原文链接：<a href="https://www.zhanggaoyuan.com/article/61" target="_blank" rel="noopener">https://www.zhanggaoyuan.com/article/61</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> golang </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
